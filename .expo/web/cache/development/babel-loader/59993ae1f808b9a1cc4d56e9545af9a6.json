{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { fetch_rendered_data, fetch_stocks } from \"../DataServer\";\nimport { useNavigation } from '@react-navigation/core';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar stopFetchMore = true;\n\nvar _ListFooterComponent = function ListFooterComponent() {\n  return _jsx(Text, {\n    style: {\n      fontSize: 16,\n      fontWeight: 'bold',\n      textAlign: 'center',\n      padding: 5\n    },\n    children: \"Loading...\"\n  });\n};\n\nvar ScrollLoad = function ScrollLoad() {\n  var navigation = useNavigation();\n\n  var renderItem = function renderItem(_ref) {\n    var item = _ref.item;\n    return _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        navigation.navigate(\"Vote\", {\n          data: item\n        });\n      },\n      style: styles.stock_button,\n      activeOpacity: 0.25,\n      children: _jsxs(Text, {\n        title: styles.stuck_button_text,\n        children: [item.ticker, \"  : \", item.name]\n      })\n    });\n  };\n\n  var quantity_rendered = 20;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      render_index = _useState4[0],\n      set_render_index = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loadingMore = _useState6[0],\n      setLoadingMore = _useState6[1];\n\n  var updateData = function updateData() {\n    var response;\n    return _regeneratorRuntime.async(function updateData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            set_render_index(render_index + quantity_rendered);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch_rendered_data(quantity_rendered, render_index));\n\n          case 3:\n            response = _context.sent;\n            if (response) setData(_toConsumableArray(response));else setData([\"error\", \"DataServer.js\", \"didnt return the promise\"]);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    updateData();\n  }, []);\n\n  var handleOnEndReached = function handleOnEndReached() {\n    var response;\n    return _regeneratorRuntime.async(function handleOnEndReached$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setLoadingMore(true);\n\n            if (stopFetchMore) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(fetch_rendered_data(quantity_rendered, render_index));\n\n          case 4:\n            response = _context2.sent;\n\n            if (!(response === 'done')) {\n              _context2.next = 7;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", setLoadingMore(false));\n\n          case 7:\n            stopFetchMore = true;\n            setData([].concat(_toConsumableArray(data), _toConsumableArray(response)));\n            set_render_index(render_index + quantity_rendered);\n\n          case 10:\n            setLoadingMore(false);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsx(FlatList, {\n    data: data,\n    keyExtractor: function keyExtractor(item) {\n      return data.indexOf(item);\n    },\n    renderItem: renderItem,\n    onEndReached: handleOnEndReached,\n    onEndReachedThreshold: 0.01,\n    onScrollBeginDrag: function onScrollBeginDrag() {\n      stopFetchMore = false;\n    },\n    ListFooterComponent: function ListFooterComponent() {\n      return loadingMore && _jsx(_ListFooterComponent, {});\n    }\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    margin: 50\n  },\n  stock_button: {\n    textAlign: 'center',\n    fontWeight: 'bold',\n    fontSize: 20,\n    padding: 15,\n    borderBottomColor: 'red',\n    borderBottomWidth: 2\n  },\n  stuck_button_text: {\n    textAlign: 'center',\n    fontWeight: 'bold',\n    fontSize: 20,\n    padding: 15,\n    borderBottomColor: 'red',\n    borderBottomWidth: 2\n  }\n});\nexport default ScrollLoad;","map":{"version":3,"sources":["C:/Users/affan/Desktop/JavaScript/REACT/projects/ticVoter/components/ScrollLoad.js"],"names":["StatusBar","React","useEffect","useState","fetch_rendered_data","fetch_stocks","useNavigation","stopFetchMore","ListFooterComponent","fontSize","fontWeight","textAlign","padding","ScrollLoad","navigation","renderItem","item","navigate","data","styles","stock_button","stuck_button_text","ticker","name","quantity_rendered","setData","render_index","set_render_index","loadingMore","setLoadingMore","updateData","response","handleOnEndReached","indexOf","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent","margin","borderBottomColor","borderBottomWidth"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { FlatList, StyleSheet, Text, View, TouchableOpacity } from 'react-native';\r\nimport { fetch_rendered_data , fetch_stocks } from '../DataServer';\r\nimport { useNavigation } from '@react-navigation/core';\r\n\r\n\r\n// check to halt load requests\r\nlet stopFetchMore = true;\r\n\r\n\r\n\r\n// LOADING VIEW\r\nconst ListFooterComponent = () => (\r\n    <Text\r\n        style={{\r\n            fontSize: 16,\r\n            fontWeight: 'bold',\r\n            textAlign: 'center',\r\n            padding: 5,\r\n        }}\r\n    >\r\n        Loading...\r\n    </Text>\r\n);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// MAIN COMPONENT\r\nconst ScrollLoad = () => {\r\n\r\n    const navigation = useNavigation()\r\n\r\n    // DATA ARRAY ITEM VIEW\r\n    const renderItem = ({ item }) => {\r\n        return (\r\n            <TouchableOpacity\r\n                onPress={() => {\r\n                    navigation.navigate(\"Vote\", {data:item} )\r\n                }}\r\n                style={styles.stock_button}\r\n                activeOpacity={0.25}\r\n            >\r\n                <Text title={styles.stuck_button_text} >\r\n                    {item.ticker}  : {item.name}\r\n                </Text>\r\n            </TouchableOpacity>\r\n        );\r\n    };\r\n\r\n\r\n    // states , fetch data and init variables\r\n    const quantity_rendered = 20;\r\n    const [data, setData] = useState([]);\r\n    const [render_index, set_render_index] = useState(0);\r\n    const [loadingMore, setLoadingMore] = useState(false);\r\n\r\n    const updateData = async () => {\r\n        set_render_index(render_index + quantity_rendered)\r\n        // gets data from server.js\r\n        const response = await fetch_rendered_data(quantity_rendered, render_index)\r\n        // check if we got data from DataServer.js\r\n        if (response) setData([...response]);\r\n        else setData([\"error\", \"DataServer.js\", \"didnt return the promise\"])\r\n    };\r\n\r\n    // on page render\r\n    useEffect(() => {\r\n        updateData()\r\n    }, []);\r\n\r\n\r\n\r\n    // load more unless server resolves done\r\n    const handleOnEndReached = async () => {\r\n        setLoadingMore(true);\r\n        if (!stopFetchMore) {\r\n            const response = await fetch_rendered_data(quantity_rendered, render_index); //fetch\r\n            if (response === 'done') return setLoadingMore(false);\r\n            stopFetchMore = true;\r\n            setData([...data, ...response]); // append to [state list]\r\n            set_render_index(render_index + quantity_rendered) // add 20 to last index\r\n        }\r\n        setLoadingMore(false);\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <FlatList\r\n            data={data}\r\n            keyExtractor={item => data.indexOf(item)}\r\n            renderItem={renderItem}\r\n            onEndReached={handleOnEndReached}\r\n            onEndReachedThreshold={0.01}\r\n            onScrollBeginDrag={() => {\r\n                stopFetchMore = false;\r\n            }}\r\n            ListFooterComponent={() => loadingMore && <ListFooterComponent />}\r\n            // onScroll={(event) => console.log(event)}\r\n        />\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#fff',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        margin: 50\r\n    },\r\n    stock_button: {\r\n        textAlign: 'center',\r\n        fontWeight: 'bold',\r\n        fontSize: 20,\r\n        padding: 15,\r\n        borderBottomColor: 'red',\r\n        borderBottomWidth: 2,\r\n    },\r\n    stuck_button_text: {\r\n        textAlign: 'center',\r\n        fontWeight: 'bold',\r\n        fontSize: 20,\r\n        padding: 15,\r\n        borderBottomColor: 'red',\r\n        borderBottomWidth: 2,\r\n    },\r\n\r\n\r\n\r\n\r\n});\r\n\r\n\r\n\r\n\r\nexport default ScrollLoad"]},"metadata":{},"sourceType":"module"}