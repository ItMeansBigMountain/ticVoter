{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { fetch_rendered_data } from \"../Dataserver\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar renderItem = function renderItem(_ref) {\n  var item = _ref.item;\n  return _jsx(Text, {\n    style: {\n      textAlign: 'center',\n      fontWeight: 'bold',\n      fontSize: 20,\n      padding: 15,\n      borderBottomColor: 'red',\n      borderBottomWidth: 2\n    },\n    children: item\n  });\n};\n\nvar stopFetchMore = true;\n\nvar _ListFooterComponent = function ListFooterComponent() {\n  return _jsx(Text, {\n    style: {\n      fontSize: 16,\n      fontWeight: 'bold',\n      textAlign: 'center',\n      padding: 5\n    },\n    children: \"Loading...\"\n  });\n};\n\nvar ScrollLoad = function ScrollLoad() {\n  var quantity_rendered = 20;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loadingMore = _useState4[0],\n      setLoadingMore = _useState4[1];\n\n  var fetchData = function fetchData() {\n    var response;\n    return _regeneratorRuntime.async(function fetchData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch_rendered_data(20));\n\n          case 2:\n            response = _context.sent;\n            setData(_toConsumableArray(response));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    fetchData();\n  }, []);\n\n  var handleOnEndReached = function handleOnEndReached() {\n    var response;\n    return _regeneratorRuntime.async(function handleOnEndReached$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setLoadingMore(true);\n\n            if (stopFetchMore) {\n              _context2.next = 9;\n              break;\n            }\n\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(fetch_rendered_data(quantity_rendered));\n\n          case 4:\n            response = _context2.sent;\n\n            if (!(response === 'done')) {\n              _context2.next = 7;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", setLoadingMore(false));\n\n          case 7:\n            setData([].concat(_toConsumableArray(data), _toConsumableArray(response)));\n            stopFetchMore = true;\n\n          case 9:\n            setLoadingMore(false);\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsx(FlatList, {\n    data: data,\n    keyExtractor: function keyExtractor(item) {\n      return item;\n    },\n    renderItem: renderItem,\n    onEndReached: handleOnEndReached,\n    onEndReachedThreshold: 0.5,\n    onScrollBeginDrag: function onScrollBeginDrag() {\n      stopFetchMore = false;\n    },\n    ListFooterComponent: function ListFooterComponent() {\n      return loadingMore && _jsx(_ListFooterComponent, {});\n    }\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default ScrollLoad;","map":{"version":3,"sources":["C:/Users/affan/Desktop/JavaScript/REACT/projects/ticVoter/components/ScrollLoad.js"],"names":["StatusBar","React","useEffect","useState","fetch_rendered_data","renderItem","item","textAlign","fontWeight","fontSize","padding","borderBottomColor","borderBottomWidth","stopFetchMore","ListFooterComponent","ScrollLoad","quantity_rendered","data","setData","loadingMore","setLoadingMore","fetchData","response","handleOnEndReached","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { FlatList, StyleSheet, Text, View } from 'react-native';\r\nimport { fetch_rendered_data } from '../Dataserver';\r\n\r\n\r\n\r\n\r\nconst renderItem = ({ item }) => {\r\n    return (\r\n        <Text\r\n            style={{\r\n                textAlign: 'center',\r\n                fontWeight: 'bold',\r\n                fontSize: 20,\r\n                padding: 15,\r\n                borderBottomColor: 'red',\r\n                borderBottomWidth: 2,\r\n            }}\r\n        >\r\n            {item}\r\n        </Text>\r\n    );\r\n};\r\n\r\nlet stopFetchMore = true;\r\n\r\nconst ListFooterComponent = () => (\r\n    <Text\r\n        style={{\r\n            fontSize: 16,\r\n            fontWeight: 'bold',\r\n            textAlign: 'center',\r\n            padding: 5,\r\n        }}\r\n    >\r\n        Loading...\r\n    </Text>\r\n);\r\n\r\nconst ScrollLoad = () => {\r\n\r\n    const quantity_rendered = 20;\r\n\r\n\r\n    const [data, setData] = useState([]);\r\n    const [loadingMore, setLoadingMore] = useState(false);\r\n\r\n    const fetchData = async () => {\r\n        const response = await fetch_rendered_data(20);\r\n        setData([...response]);\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, []);\r\n\r\n    const handleOnEndReached = async () => {\r\n        setLoadingMore(true);\r\n        if (!stopFetchMore) {\r\n            const response = await fetch_rendered_data(quantity_rendered);\r\n            if (response === 'done') return setLoadingMore(false);\r\n            setData([...data, ...response]);\r\n            stopFetchMore = true;\r\n        }\r\n        setLoadingMore(false);\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <FlatList\r\n            data={data}\r\n            keyExtractor={item => item}\r\n            renderItem={renderItem}\r\n            onEndReached={handleOnEndReached}\r\n            onEndReachedThreshold={0.5}\r\n            onScrollBeginDrag={() => {\r\n                stopFetchMore = false;\r\n            }}\r\n            ListFooterComponent={() => loadingMore && <ListFooterComponent />}\r\n        />\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#fff',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n});\r\n\r\n\r\n\r\n\r\nexport default ScrollLoad"]},"metadata":{},"sourceType":"module"}