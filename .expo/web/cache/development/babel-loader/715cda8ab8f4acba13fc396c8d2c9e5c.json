{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport React, { useEffect, useState } from 'react';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar CONFIG = require(\"../api_config/config.json\");\n\nvar VoteCardScreen = function VoteCardScreen(_ref) {\n  var route = _ref.route;\n\n  var ticker_info = function ticker_info(ticker) {\n    var response, json;\n    return _regeneratorRuntime.async(function ticker_info$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(CONFIG.base_url + \"api/tickers/\" + ticker));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            json = _context.sent;\n            return _context.abrupt(\"return\", json);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var voteCard_info = function voteCard_info(ticker) {\n    var response, json;\n    return _regeneratorRuntime.async(function voteCard_info$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch(CONFIG.base_url + \"api/votes/\" + ticker));\n\n          case 2:\n            response = _context2.sent;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            json = _context2.sent;\n            return _context2.abrupt(\"return\", json);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var up_vote = function up_vote(ticker) {\n    var response, json;\n    return _regeneratorRuntime.async(function up_vote$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(fetch(CONFIG.base_url + \"/api/build_internal\", {\n              method: 'POST',\n              headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                firstParam: 'yourValue',\n                secondParam: 'yourOtherValue'\n              })\n            }));\n\n          case 2:\n            response = _context3.sent;\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            json = _context3.sent;\n            return _context3.abrupt(\"return\", json);\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(Text, {\n      children: [route.params.data.name, \" | \", route.params.data.ticker]\n    }), _jsxs(Text, {\n      children: [\"ETF? \", route.params.data.is_etf ? \"yes\" : \"no\"]\n    }), _jsx(Text, {\n      children: route.params.data.exchange\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n});\nexport default VoteCardScreen;","map":{"version":3,"sources":["C:/Users/affan/Desktop/JavaScript/REACT/projects/ticVoter/screens/VoteCardScreen.js"],"names":["React","useEffect","useState","CONFIG","require","VoteCardScreen","route","ticker_info","ticker","fetch","base_url","response","json","voteCard_info","up_vote","method","headers","Accept","body","JSON","stringify","firstParam","secondParam","styles","container","params","data","name","is_etf","exchange","StyleSheet","create","flex","justifyContent","alignItems"],"mappings":";;;;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;AAEA,IAAMC,MAAM,GAAGC,OAAO,6BAAtB;;AAMA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAAe;AAAA,MAAZC,KAAY,QAAZA,KAAY;;AAMlC,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACKC,KAAK,CACnBN,MAAM,CAACO,QADY,oBACWF,MADX,CADV;;AAAA;AACZG,YAAAA,QADY;AAAA;AAAA,6CAICA,QAAQ,CAACC,IAAT,EAJD;;AAAA;AAIZA,YAAAA,IAJY;AAAA,6CAKTA,IALS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApB;;AAQA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAOL,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACGC,KAAK,CACnBN,MAAM,CAACO,QADY,kBACSF,MADT,CADR;;AAAA;AACdG,YAAAA,QADc;AAAA;AAAA,6CAIDA,QAAQ,CAACC,IAAT,EAJC;;AAAA;AAIdA,YAAAA,IAJc;AAAA,8CAKXA,IALW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAtB;;AAWA,MAAME,OAAO,GAAG,SAAVA,OAAU,CAAON,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACSC,KAAK,CAAIN,MAAM,CAACO,QAAX,0BAA0C;AAChEK,cAAAA,MAAM,EAAE,MADwD;AAEhEC,cAAAA,OAAO,EAAE;AACLC,gBAAAA,MAAM,EAAE,kBADH;AAEL,gCAAgB;AAFX,eAFuD;AAMhEC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,gBAAAA,UAAU,EAAE,WADK;AAEjBC,gBAAAA,WAAW,EAAE;AAFI,eAAf;AAN0D,aAA1C,CADd;;AAAA;AACRX,YAAAA,QADQ;AAAA;AAAA,6CAaKA,QAAQ,CAACC,IAAT,EAbL;;AAAA;AAaRA,YAAAA,IAbQ;AAAA,8CAcLA,IAdK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AA0BA,SACI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEW,MAAM,CAACC,SAApB;AAAA,eAEI,MAAC,IAAD;AAAA,iBAAOlB,KAAK,CAACmB,MAAN,CAAaC,IAAb,CAAkBC,IAAzB,SAAkCrB,KAAK,CAACmB,MAAN,CAAaC,IAAb,CAAkBlB,MAApD;AAAA,MAFJ,EAGI,MAAC,IAAD;AAAA,0BAAYF,KAAK,CAACmB,MAAN,CAAaC,IAAb,CAAkBE,MAAlB,GAA2B,KAA3B,GAAmC,IAA/C;AAAA,MAHJ,EAII,KAAC,IAAD;AAAA,gBAAOtB,KAAK,CAACmB,MAAN,CAAaC,IAAb,CAAkBG;AAAzB,MAJJ;AAAA,IADJ;AAUH,CA7DD;;AAoEA,IAAMN,MAAM,GAAGO,UAAU,CAACC,MAAX,CACX;AACIP,EAAAA,SAAS,EAAE;AACPQ,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,cAAc,EAAE,QAFT;AAGPC,IAAAA,UAAU,EAAE;AAHL;AADf,CADW,CAAf;AAeA,eAAe7B,cAAf","sourcesContent":["import { StyleSheet, Text, TouchableOpacity, View, ScrollView } from 'react-native'\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nconst CONFIG = require(\"../api_config/config.json\")\r\n\r\n\r\n\r\n\r\n\r\nconst VoteCardScreen = ({ route }) => {\r\n\r\n\r\n\r\n\r\n    // DISPLAY_INFO FETCH DATA\r\n    const ticker_info = async (ticker) => {\r\n        let response = await fetch(\r\n            `${CONFIG.base_url}api/tickers/${ticker}`\r\n        );\r\n        let json = await response.json();\r\n        return json;\r\n    }\r\n\r\n    const voteCard_info = async (ticker) => {\r\n        let response = await fetch(\r\n            `${CONFIG.base_url}api/votes/${ticker}`\r\n        );\r\n        let json = await response.json();\r\n        return json;\r\n    }\r\n\r\n\r\n\r\n    // POST VOTES\r\n    const up_vote = async (ticker) => {\r\n        let response = await fetch(`${CONFIG.base_url}/api/build_internal`, {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n                firstParam: 'yourValue',\r\n                secondParam: 'yourOtherValue',\r\n            }),\r\n        });\r\n\r\n        let json = await response.json();\r\n        return json;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n\r\n            <Text>{route.params.data.name} | {route.params.data.ticker}</Text>\r\n            <Text>ETF? {route.params.data.is_etf ? \"yes\" : \"no\"}</Text>\r\n            <Text>{route.params.data.exchange}</Text>\r\n\r\n\r\n        </View>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst styles = StyleSheet.create(\r\n    {\r\n        container: {\r\n            flex: 1,\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n        },\r\n    }\r\n)\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default VoteCardScreen\r\n"]},"metadata":{},"sourceType":"module"}