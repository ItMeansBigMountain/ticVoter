{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar StockList = function StockList() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      all_stocks = _useState4[0],\n      setStocksData = _useState4[1];\n\n  fetchData = function fetchData() {\n    fetch('https://dumbstockapi.com/stock?exchanges=NYSE').then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      return setStocksData(json);\n    }).catch(function (error) {\n      return console.error(error);\n    }).finally(function () {\n      return setLoading(false);\n    });\n  };\n\n  useEffect(function () {\n    setLoading(true);\n    getUsers();\n  }, []);\n  return _jsx(View, {\n    style: {\n      padding: 20\n    },\n    children: isLoading ? _jsx(Text, {\n      children: \"Loading...\"\n    }) : _jsx(FlatList, {\n      data: all_stocks,\n      keyExtractor: function keyExtractor(_ref) {\n        var id = _ref.id;\n        return id.toString();\n      },\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsxs(Text, {\n          children: [item.name, \"  \"]\n        });\n      }\n    })\n  });\n};\n\nexport default StockList;","map":{"version":3,"sources":["C:/Users/affan/Desktop/JavaScript/REACT/projects/ticVoter/components/StockList.js"],"names":["React","StockList","useState","isLoading","setLoading","all_stocks","setStocksData","fetchData","fetch","then","response","json","catch","error","console","finally","useEffect","getUsers","padding","id","toString","item","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAOpB,kBAAgCC,QAAQ,CAAC,KAAD,CAAxC;AAAA;AAAA,MAAOC,SAAP;AAAA,MAAkBC,UAAlB;;AACA,mBAAoCF,QAAQ,CAAC,EAAD,CAA5C;AAAA;AAAA,MAAOG,UAAP;AAAA,MAAmBC,aAAnB;;AACAC,EAAAA,SAAS,GAAG,qBAAM;AACdC,IAAAA,KAAK,CAAC,+CAAD,CAAL,CACKC,IADL,CACU,UAACC,QAAD;AAAA,aAAcA,QAAQ,CAACC,IAAT,EAAd;AAAA,KADV,EAEKF,IAFL,CAEU,UAACE,IAAD;AAAA,aAAUL,aAAa,CAACK,IAAD,CAAvB;AAAA,KAFV,EAGKC,KAHL,CAGW,UAACC,KAAD;AAAA,aAAWC,OAAO,CAACD,KAAR,CAAcA,KAAd,CAAX;AAAA,KAHX,EAIKE,OAJL,CAIa;AAAA,aAAMX,UAAU,CAAC,KAAD,CAAhB;AAAA,KAJb;AAKH,GAND;;AAOAY,EAAAA,SAAS,CAAC,YAAM;AACZZ,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAa,IAAAA,QAAQ;AACX,GAHQ,EAGN,EAHM,CAAT;AAIA,SACI,KAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAb;AAAA,cACKf,SAAS,GAAG,KAAC,IAAD;AAAA;AAAA,MAAH,GAEF,KAAC,QAAD;AACI,MAAA,IAAI,EAAEE,UADV;AAEI,MAAA,YAAY,EAAE;AAAA,YAAGc,EAAH,QAAGA,EAAH;AAAA,eAAYA,EAAE,CAACC,QAAH,EAAZ;AAAA,OAFlB;AAGI,MAAA,UAAU,EAAE;AAAA,YAAGC,IAAH,SAAGA,IAAH;AAAA,eAAc,MAAC,IAAD;AAAA,qBAAOA,IAAI,CAACC,IAAZ;AAAA,UAAd;AAAA;AAHhB;AAHZ,IADJ;AAYH,CAhCD;;AAkCA,eAAerB,SAAf","sourcesContent":["import React from 'react'\r\n\r\nconst StockList = () => {\r\n\r\n    \r\n\r\n\r\n    \r\n\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [all_stocks, setStocksData] = useState([])\r\n    fetchData = () => {\r\n        fetch('https://dumbstockapi.com/stock?exchanges=NYSE')\r\n            .then((response) => response.json())\r\n            .then((json) => setStocksData(json))\r\n            .catch((error) => console.error(error))\r\n            .finally(() => setLoading(false));\r\n    }\r\n    useEffect(() => {\r\n        setLoading(true);\r\n        getUsers();\r\n    }, []);\r\n    return (\r\n        <View style={{ padding: 20 }}>\r\n            {isLoading ? <Text>Loading...</Text> :\r\n                (\r\n                    <FlatList\r\n                        data={all_stocks}\r\n                        keyExtractor={({ id }) => id.toString()}\r\n                        renderItem={({ item }) => <Text>{item.name}  </Text>}\r\n                    />\r\n                )}\r\n        </View>\r\n    );\r\n};\r\n\r\nexport default StockList"]},"metadata":{},"sourceType":"module"}