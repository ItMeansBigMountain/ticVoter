{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar Server_object = _createClass(function Server_object(lastItem, all_stocks) {\n  _classCallCheck(this, Server_object);\n\n  this.lastItem = lastItem;\n  this.all_stocks = all_stocks;\n});\n\nServer_object.fetch_stocks = function _callee() {\n  var response, json;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://dumbstockapi.com/stock?exchanges=NYSE'));\n\n        case 2:\n          response = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 5:\n          json = _context.sent;\n          return _context.abrupt(\"return\", json);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nServer_object.chunking = function (qty, arr_object, lastItemIndex) {\n  var newArr;\n  if (lastItemIndex === arr_object.length - 1) return [\"done\"];\n\n  if (!Server_object.lastItem) {\n    console.log('>>>>>> onEvent()  ', lastItemIndex);\n    newArr = _toConsumableArray(arr_object).slice(0, qty);\n    Server_object.lastItem = _toConsumableArray(newArr).pop();\n  } else {\n    console.log('<<<<<< updating  ', lastItemIndex);\n    newArr = _toConsumableArray(arr_object).slice(lastItemIndex, qty + lastItemIndex);\n    Server_object.lastItem = _toConsumableArray(arr_object).pop();\n  }\n\n  return newArr;\n};\n\nexport var fetch_rendered_data = function fetch_rendered_data(qty, index) {\n  var s = new Server_object(\"\", Server_object.fetch_stocks().then(function (r) {\n    return r;\n  }));\n  var arr = s.fetch_stocks().then(function (promise_object) {\n    return Server_object.chunking(qty, promise_object, index);\n  });\n  return arr;\n};","map":{"version":3,"sources":["C:/Users/affan/Desktop/JavaScript/REACT/projects/ticVoter/DataServer.js"],"names":["Server_object","lastItem","all_stocks","fetch_stocks","fetch","response","json","chunking","qty","arr_object","lastItemIndex","newArr","length","console","log","slice","pop","fetch_rendered_data","index","s","then","r","arr","promise_object"],"mappings":";;;;;IAEMA,a,gBACJ,uBAAYC,QAAZ,EAAsBC,UAAtB,EAAkC;AAAA;;AAChC,OAAKD,QAAL,GAAgBA,QAAhB;AACA,OAAKC,UAAL,GAAkBA,UAAlB;AACD,C;;AAJGF,a,CAQGG,Y,GAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACCC,KAAK,CACxB,+CADwB,CADN;;AAAA;AAChBC,UAAAA,QADgB;AAAA;AAAA,2CAIHA,QAAQ,CAACC,IAAT,EAJG;;AAAA;AAIhBA,UAAAA,IAJgB;AAAA,2CAKbA,IALa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C;;AARlBN,a,CAoBGO,Q,GAAW,UAACC,GAAD,EAAMC,UAAN,EAAkBC,aAAlB,EAAoC;AACpD,MAAIC,MAAJ;AAGA,MAAID,aAAa,KAAKD,UAAU,CAACG,MAAX,GAAoB,CAA1C,EAA6C,OAAO,CAAC,MAAD,CAAP;;AAG7C,MAAI,CA3BFZ,aA2BG,CAAKC,QAAV,EAAoB;AAClBY,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCJ,aAAlC;AACAC,IAAAA,MAAM,GAAG,mBAAIF,UAAJ,EAAgBM,KAAhB,CAAsB,CAAtB,EAAyBP,GAAzB,CAAT;AA7BAR,IAAAA,aA8BA,CAAKC,QAAL,GAAgB,mBAAIU,MAAJ,EAAYK,GAAZ,EAAhB;AACD,GAJD,MAOK;AACHH,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCJ,aAAjC;AACAC,IAAAA,MAAM,GAAG,mBAAIF,UAAJ,EAAgBM,KAAhB,CAAsBL,aAAtB,EAAqCF,GAAG,GAAGE,aAA3C,CAAT;AApCAV,IAAAA,aAqCA,CAAKC,QAAL,GAAgB,mBAAIQ,UAAJ,EAAgBO,GAAhB,EAAhB;AACD;;AAED,SAAOL,MAAP;AAED,C;;AAgBH,OAAO,IAAMM,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACT,GAAD,EAAMU,KAAN,EAAgB;AACjD,MAAMC,CAAC,GAAG,IAAInB,aAAJ,CAAkB,EAAlB,EAAsBA,aAAa,CAACG,YAAd,GAA6BiB,IAA7B,CAAkC,UAAAC,CAAC;AAAA,WAAIA,CAAJ;AAAA,GAAnC,CAAtB,CAAV;AACA,MAAMC,GAAG,GAAGH,CAAC,CAAChB,YAAF,GACTiB,IADS,CACJ,UAAAG,cAAc;AAAA,WAAIvB,aAAa,CAACO,QAAd,CAAuBC,GAAvB,EAA4Be,cAA5B,EAA4CL,KAA5C,CAAJ;AAAA,GADV,CAAZ;AAEA,SAAOI,GAAP;AACD,CALM","sourcesContent":["\r\n\r\nclass Server_object {\r\n  constructor(lastItem, all_stocks) {\r\n    this.lastItem = lastItem;\r\n    this.all_stocks = all_stocks\r\n  }\r\n\r\n\r\n  // HTTP REQUEST\r\n  static fetch_stocks = async () => {\r\n    let response = await fetch(\r\n      'https://dumbstockapi.com/stock?exchanges=NYSE'\r\n    );\r\n    let json = await response.json();\r\n    return json;\r\n  }\r\n\r\n\r\n\r\n\r\n  // CHUNK API REQUEST DATA \r\n  static chunking = (qty, arr_object, lastItemIndex) => {\r\n    let newArr;\r\n\r\n    // check if list complete\r\n    if (lastItemIndex === arr_object.length - 1) return [\"done\"];\r\n\r\n    // INIT all_stocks state\r\n    if (!this.lastItem) {\r\n      console.log('>>>>>> onEvent()  ', lastItemIndex)\r\n      newArr = [...arr_object].slice(0, qty);\r\n      this.lastItem = [...newArr].pop();\r\n    }\r\n\r\n    // UPDATE all_stocks state\r\n    else {\r\n      console.log('<<<<<< updating  ', lastItemIndex)\r\n      newArr = [...arr_object].slice(lastItemIndex, qty + lastItemIndex);\r\n      this.lastItem = [...arr_object].pop();\r\n    }\r\n\r\n    return newArr\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const fetch_rendered_data = (qty, index) => {\r\n  const s = new Server_object(\"\", Server_object.fetch_stocks().then(r => r))\r\n  const arr = s.fetch_stocks()\r\n    .then(promise_object => Server_object.chunking(qty, promise_object, index))\r\n  return arr;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}