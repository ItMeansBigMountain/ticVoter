{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar Server = _createClass(function Server(_lastItem, all_stocks) {\n  _classCallCheck(this, Server);\n\n  this.fetch_stocks = function _callee() {\n    var response, json;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://dumbstockapi.com/stock?exchanges=NYSE'));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            json = _context.sent;\n            return _context.abrupt(\"return\", json);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  this.chunking = function (qty, arr_object, lastItemIndex) {\n    var newArr;\n    if (lastItemIndex === arr_object.length - 1) return [\"done\"];\n\n    if (!lastItem) {\n      console.log('>>>>>> onEvent()  ', lastItemIndex);\n      newArr = _toConsumableArray(arr_object).slice(0, qty);\n      lastItem = _toConsumableArray(newArr).pop();\n    } else {\n      console.log('<<<<<< updating  ', lastItemIndex);\n      newArr = _toConsumableArray(arr_object).slice(lastItemIndex, qty + lastItemIndex);\n      lastItem = _toConsumableArray(arr_object).pop();\n    }\n\n    return newArr;\n  };\n\n  this.lastItem = '';\n  this.all_stocks = [];\n});\n\nexport var fetch_rendered_data = function fetch_rendered_data(qty, index) {\n  var arr = fetch_stocks().then(function (promise_object) {\n    return chunking(qty, promise_object, index);\n  });\n  return arr;\n};","map":{"version":3,"sources":["C:/Users/affan/Desktop/JavaScript/REACT/projects/ticVoter/DataServer.js"],"names":["Server","lastItem","all_stocks","fetch_stocks","fetch","response","json","chunking","qty","arr_object","lastItemIndex","newArr","length","console","log","slice","pop","fetch_rendered_data","index","arr","then","promise_object"],"mappings":";;;;;IAEMA,M,gBACJ,gBAAYC,SAAZ,EAAsBC,UAAtB,EAAkC;AAAA;;AAAA,OAWlCC,YAXkC,GAWnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACQC,KAAK,CACxB,+CADwB,CADb;;AAAA;AACTC,YAAAA,QADS;AAAA;AAAA,6CAIIA,QAAQ,CAACC,IAAT,EAJJ;;AAAA;AAITA,YAAAA,IAJS;AAAA,6CAKNA,IALM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAXmB;;AAAA,OAqBlCC,QArBkC,GAqBvB,UAACC,GAAD,EAAMC,UAAN,EAAkBC,aAAlB,EAAoC;AAC7C,QAAIC,MAAJ;AAGA,QAAID,aAAa,KAAKD,UAAU,CAACG,MAAX,GAAoB,CAA1C,EAA6C,OAAO,CAAC,MAAD,CAAP;;AAG7C,QAAI,CAACX,QAAL,EAAe;AACbY,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCJ,aAAlC;AACAC,MAAAA,MAAM,GAAG,mBAAIF,UAAJ,EAAgBM,KAAhB,CAAsB,CAAtB,EAAyBP,GAAzB,CAAT;AACAP,MAAAA,QAAQ,GAAG,mBAAIU,MAAJ,EAAYK,GAAZ,EAAX;AACD,KAJD,MAOK;AACHH,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCJ,aAAjC;AACAC,MAAAA,MAAM,GAAG,mBAAIF,UAAJ,EAAgBM,KAAhB,CAAsBL,aAAtB,EAAqCF,GAAG,GAAGE,aAA3C,CAAT;AACAT,MAAAA,QAAQ,GAAG,mBAAIQ,UAAJ,EAAgBO,GAAhB,EAAX;AACD;;AAED,WAAOL,MAAP;AAED,GA3CiC;;AAChC,OAAKV,QAAL,GAAgB,EAAhB;AACA,OAAKC,UAAL,GAAkB,EAAlB;AACD,C;;AA2DH,OAAO,IAAMe,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACT,GAAD,EAAMU,KAAN,EAAgB;AACjD,MAAMC,GAAG,GAAGhB,YAAY,GACrBiB,IADS,CACJ,UAAAC,cAAc;AAAA,WAAId,QAAQ,CAACC,GAAD,EAAMa,cAAN,EAAsBH,KAAtB,CAAZ;AAAA,GADV,CAAZ;AAGA,SAAOC,GAAP;AACD,CALM","sourcesContent":["\r\n\r\nclass Server {\r\n  constructor(lastItem, all_stocks) {\r\n    this.lastItem = '';\r\n    this.all_stocks = [];\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // HTTP REQUEST\r\n  fetch_stocks = async () => {\r\n    let response = await fetch(\r\n      'https://dumbstockapi.com/stock?exchanges=NYSE'\r\n    );\r\n    let json = await response.json();\r\n    return json;\r\n  }\r\n\r\n\r\n\r\n  chunking = (qty, arr_object, lastItemIndex) => {\r\n    let newArr;\r\n  \r\n    // check if list complete\r\n    if (lastItemIndex === arr_object.length - 1) return [\"done\"];\r\n  \r\n    // INIT all_stocks state\r\n    if (!lastItem) {\r\n      console.log('>>>>>> onEvent()  ', lastItemIndex)\r\n      newArr = [...arr_object].slice(0, qty);\r\n      lastItem = [...newArr].pop();\r\n    }\r\n  \r\n    // UPDATE all_stocks state\r\n    else {\r\n      console.log('<<<<<< updating  ', lastItemIndex)\r\n      newArr = [...arr_object].slice(lastItemIndex, qty + lastItemIndex);\r\n      lastItem = [...arr_object].pop();\r\n    }\r\n  \r\n    return newArr\r\n  \r\n  }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// CHUNK API REQUEST DATA \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const fetch_rendered_data = (qty, index) => {\r\n  const arr = fetch_stocks()\r\n    .then(promise_object => chunking(qty, promise_object, index))\r\n  // console.log(arr)\r\n  return arr;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}