{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar fetch_stocks = function fetch_stocks() {\n  var response, json;\n  return _regeneratorRuntime.async(function fetch_stocks$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://dumbstockapi.com/stock?exchanges=NYSE'));\n\n        case 2:\n          response = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 5:\n          json = _context.sent;\n          return _context.abrupt(\"return\", json);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar lastItem = '';\nexport var fetch_rendered_data = function fetch_rendered_data(qty) {\n  var arr;\n  return _regeneratorRuntime.async(function fetch_rendered_data$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          arr = fetch_stocks().then(function (arr_object) {\n            var newArr;\n            var lastItemIndex = arr_object.indexOf(lastItem);\n            if (lastItemIndex === arr_object.length - 1) return resolve('done');\n\n            if (!lastItem) {\n              newArr = _toConsumableArray(arr_object).slice(0, qty);\n              lastItem = _toConsumableArray(newArr).pop();\n            } else {\n              var newIndex = arr_object.indexOf(lastItem) + 1;\n              newArr = _toConsumableArray(arr_object).slice(newIndex, qty + newIndex);\n              lastItem = _toConsumableArray(newArr).pop();\n            }\n\n            console.log(newArr);\n            return newArr;\n          });\n          console.log(newArr);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["C:/Users/affan/Desktop/JavaScript/REACT/projects/ticVoter/DataServer.js"],"names":["fetch_stocks","fetch","response","json","lastItem","fetch_rendered_data","qty","arr","then","arr_object","newArr","lastItemIndex","indexOf","length","resolve","slice","pop","newIndex","console","log"],"mappings":";;;AAGA,IAAMA,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACEC,KAAK,CACxB,+CADwB,CADP;;AAAA;AACfC,UAAAA,QADe;AAAA;AAAA,2CAIFA,QAAQ,CAACC,IAAT,EAJE;;AAAA;AAIfA,UAAAA,IAJe;AAAA,2CAKZA,IALY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;AAcA,IAAIC,QAAQ,GAAG,EAAf;AACA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAE3BC,UAAAA,GAF2B,GAErBP,YAAY,GACrBQ,IADS,CAER,UAACC,UAAD,EAAgB;AAEZ,gBAAIC,MAAJ;AACA,gBAAMC,aAAa,GAAGF,UAAU,CAACG,OAAX,CAAmBR,QAAnB,CAAtB;AACA,gBAAIO,aAAa,KAAKF,UAAU,CAACI,MAAX,GAAoB,CAA1C,EAA6C,OAAOC,OAAO,CAAC,MAAD,CAAd;;AAC7C,gBAAI,CAACV,QAAL,EAAe;AACbM,cAAAA,MAAM,GAAG,mBAAID,UAAJ,EAAgBM,KAAhB,CAAsB,CAAtB,EAAyBT,GAAzB,CAAT;AACAF,cAAAA,QAAQ,GAAG,mBAAIM,MAAJ,EAAYM,GAAZ,EAAX;AACD,aAHD,MAGO;AACL,kBAAMC,QAAQ,GAAGR,UAAU,CAACG,OAAX,CAAmBR,QAAnB,IAA+B,CAAhD;AACAM,cAAAA,MAAM,GAAG,mBAAID,UAAJ,EAAgBM,KAAhB,CAAsBE,QAAtB,EAAgCX,GAAG,GAAGW,QAAtC,CAAT;AACAb,cAAAA,QAAQ,GAAG,mBAAIM,MAAJ,EAAYM,GAAZ,EAAX;AACD;;AAIDE,YAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AACA,mBAAOA,MAAP;AAED,WArBK,CAFqB;AAyB3BQ,UAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;;AAzB2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B","sourcesContent":["\r\n\r\n// HTTP REQUEST\r\nconst fetch_stocks = async () => {\r\n  let response = await fetch(\r\n    'https://dumbstockapi.com/stock?exchanges=NYSE'\r\n  );\r\n  let json = await response.json();\r\n  return json;\r\n}\r\n\r\n\r\n\r\n\r\n// splits fetched json data array into chunks that are going to be requested whenever user scrolls\r\n\r\n\r\nlet lastItem = '';\r\nexport const fetch_rendered_data = async qty => {\r\n  // fetch stocks promise\r\n  const arr = fetch_stocks()\r\n    .then(\r\n      (arr_object) => {\r\n        // create promise to chunk qty of stocks to render\r\n          let newArr;\r\n          const lastItemIndex = arr_object.indexOf(lastItem);\r\n          if (lastItemIndex === arr_object.length - 1) return resolve('done');\r\n          if (!lastItem) {\r\n            newArr = [...arr_object].slice(0, qty);\r\n            lastItem = [...newArr].pop();\r\n          } else {\r\n            const newIndex = arr_object.indexOf(lastItem) + 1;\r\n            newArr = [...arr_object].slice(newIndex, qty + newIndex);\r\n            lastItem = [...newArr].pop();\r\n          }\r\n         \r\n          \r\n          // // DEBUG\r\n          console.log(newArr)\r\n          return newArr\r\n          \r\n        })\r\n        \r\n        console.log(newArr)\r\n\r\n}"]},"metadata":{},"sourceType":"module"}