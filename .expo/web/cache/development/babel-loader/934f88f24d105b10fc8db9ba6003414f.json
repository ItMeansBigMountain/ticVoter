{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useEffect } from 'react';\nimport { auth } from \"../firebase\";\nimport { useNavigation } from '@react-navigation/core';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar HomeScreen = function HomeScreen() {\n  var _auth$currentUser;\n\n  var navigation = useNavigation();\n\n  var handleSignOut = function handleSignOut() {\n    auth.signOut().then(function () {\n      navigation.replace(\"Login\");\n    }).catch(function (error) {\n      alert(error.message);\n    });\n  };\n\n  var _useState = useState(fetchData()),\n      _useState2 = _slicedToArray(_useState, 2),\n      all_stocks = _useState2[0],\n      setStocksData = _useState2[1];\n\n  useEffect(function () {\n    var getTasks = function getTasks() {\n      var taskFromServer;\n      return _regeneratorRuntime.async(function getTasks$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(fetchData());\n\n            case 2:\n              taskFromServer = _context.sent;\n              setTasks(taskFromServer);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getTasks();\n  }, []);\n\n  var fetchData = function fetchData() {\n    var res, data;\n    return _regeneratorRuntime.async(function fetchData$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"https://dumbstockapi.com/stock?exchanges=NYSE\"));\n\n          case 2:\n            res = _context2.sent;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(res.json());\n\n          case 5:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(Text, {\n      children: [\"Email: \", (_auth$currentUser = auth.currentUser) == null ? void 0 : _auth$currentUser.email, \" \"]\n    }), _jsx(TouchableOpacity, {\n      style: styles.button,\n      onPress: handleSignOut,\n      children: _jsx(Text, {\n        style: styles.buttonText,\n        children: \"Sign Out\"\n      })\n    }), _jsxs(ScrollView, {\n      horizontal: false,\n      style: styles.container,\n      children: [ItemsList.map(function (indivisual_object) {\n        return _jsx(View, {\n          style: styles.item,\n          children: _jsxs(Text, {\n            style: styles.text,\n            children: [\" \", indivisual_object.data, \" \"]\n          })\n        }, indivisual_object.key);\n      }), _jsx(StatusBar, {\n        style: \"auto\"\n      })]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  button: {\n    backgroundColor: \"#0782F9\",\n    width: \"60%%\",\n    padding: 15,\n    borderRadius: 10,\n    alignItems: \"center\",\n    marginTop: 40\n  },\n  buttonText: {\n    color: \"white\",\n    fontWeight: \"700\",\n    fontSize: 16\n  }\n});\nexport default HomeScreen;","map":{"version":3,"sources":["C:/Users/affan/Desktop/JavaScript/REACT/projects/ticVoter/screens/HomeScreen.js"],"names":["React","useEffect","auth","useNavigation","HomeScreen","navigation","handleSignOut","signOut","then","replace","catch","error","alert","message","useState","fetchData","all_stocks","setStocksData","getTasks","taskFromServer","setTasks","fetch","res","json","data","styles","container","currentUser","email","button","buttonText","ItemsList","map","indivisual_object","item","text","key","StyleSheet","create","flex","justifyContent","alignItems","backgroundColor","width","padding","borderRadius","marginTop","color","fontWeight","fontSize"],"mappings":"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","sourcesContent":["import { StyleSheet, Text, TouchableOpacity, View } from 'react-native'\r\nimport React, { useEffect } from 'react'\r\nimport { auth } from '../firebase'\r\nimport { useNavigation } from '@react-navigation/core';\r\n\r\n\r\n\r\n\r\nconst HomeScreen = () => {\r\n\r\n  const navigation = useNavigation()\r\n\r\n  const handleSignOut = () => {\r\n    auth\r\n      .signOut()\r\n      .then(() => {\r\n        navigation.replace(\"Login\")\r\n      })\r\n      .catch(error => { alert(error.message) })\r\n  }\r\n\r\n\r\n\r\n\r\n  // HTTP FETCH \r\n  const [all_stocks, setStocksData] = useState(fetchData())\r\n\r\n\r\n  // fetch all tasks from API\r\n  useEffect(() => {\r\n    const getTasks = async () => {\r\n      const taskFromServer = await fetchData()\r\n      setTasks(taskFromServer)\r\n    }\r\n    getTasks()\r\n  }, [])\r\n\r\n\r\n\r\n  // fetch http requests ALL TASKS\r\n  const fetchData = async () => {\r\n    const res = await fetch(\"https://dumbstockapi.com/stock?exchanges=NYSE\")\r\n    const data = await res.json()\r\n    return data\r\n  }\r\n  // const data = await fetchData() \r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n\r\n\r\n\r\n      <Text>Email: {auth.currentUser?.email} </Text>\r\n      <TouchableOpacity style={styles.button} onPress={handleSignOut}>\r\n        <Text style={styles.buttonText}>Sign Out</Text>\r\n      </TouchableOpacity>\r\n\r\n\r\n      <ScrollView\r\n        horizontal={false}\r\n        style={styles.container}\r\n        // refreshControl={\r\n        //   <RefreshControl\r\n        //     refreshing={Refreshing_state}\r\n        //     onRefresh={onRefreshHandler}\r\n        //     colors={[\"#ff00ff\"]}\r\n        //   />\r\n        // }\r\n      >\r\n        {/* DISPLAY LIST */}\r\n        {ItemsList.map(\r\n          (indivisual_object) => {\r\n            return (\r\n              <View style={styles.item} key={indivisual_object.key} >\r\n                <Text style={styles.text}> {indivisual_object.data} </Text>\r\n              </View>\r\n            )\r\n          }\r\n        )}\r\n        <StatusBar style=\"auto\" />\r\n      </ScrollView>\r\n\r\n\r\n\r\n    </View>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst styles = StyleSheet.create(\r\n  {\r\n    container: {\r\n      flex: 1,\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n    },\r\n    button: {\r\n      backgroundColor: \"#0782F9\",\r\n      width: \"60%%\",\r\n      padding: 15,\r\n      borderRadius: 10,\r\n      alignItems: \"center\",\r\n      marginTop: 40\r\n    },\r\n    buttonText: {\r\n      color: \"white\",\r\n      fontWeight: \"700\",\r\n      fontSize: 16,\r\n    },\r\n  }\r\n)\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default HomeScreen\r\n"]},"metadata":{},"sourceType":"module"}