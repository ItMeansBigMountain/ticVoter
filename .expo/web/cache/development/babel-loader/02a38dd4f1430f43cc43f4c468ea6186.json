{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar fetch_stocks = function fetch_stocks() {\n  var response, json;\n  return _regeneratorRuntime.async(function fetch_stocks$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://dumbstockapi.com/stock?exchanges=NYSE'));\n\n        case 2:\n          response = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 5:\n          json = _context.sent;\n          return _context.abrupt(\"return\", json);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar lastItem = '';\nexport var fetch_rendered_data = function fetch_rendered_data(qty) {\n  var arr;\n  return _regeneratorRuntime.async(function fetch_rendered_data$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          arr = fetch_stocks().then(function _callee2(arr_object) {\n            var p;\n            return _regeneratorRuntime.async(function _callee2$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    p = new Promise(function _callee(resolve, reject) {\n                      var newArr, lastItemIndex, newIndex;\n                      return _regeneratorRuntime.async(function _callee$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              lastItemIndex = arr_object.indexOf(lastItem);\n\n                              if (!(lastItemIndex === arr_object.length - 1)) {\n                                _context2.next = 3;\n                                break;\n                              }\n\n                              return _context2.abrupt(\"return\", resolve('done'));\n\n                            case 3:\n                              if (!lastItem) {\n                                newArr = _toConsumableArray(arr_object).slice(0, qty);\n                                lastItem = _toConsumableArray(newArr).pop();\n                              } else {\n                                newIndex = arr_object.indexOf(lastItem) + 1;\n                                newArr = _toConsumableArray(arr_object).slice(newIndex, qty + newIndex);\n                                lastItem = _toConsumableArray(newArr).pop();\n                              }\n\n                              setTimeout(function () {\n                                resolve(newArr);\n                              }, 1000);\n\n                            case 5:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, null, null, null, Promise);\n                    });\n                    console.log(p);\n\n                  case 2:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          });\n\n        case 1:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["C:/Users/affan/Desktop/JavaScript/REACT/projects/ticVoter/DataServer.js"],"names":["fetch_stocks","fetch","response","json","lastItem","fetch_rendered_data","qty","arr","then","arr_object","p","Promise","resolve","reject","lastItemIndex","indexOf","length","newArr","slice","pop","newIndex","setTimeout","console","log"],"mappings":";;;AAGA,IAAMA,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACEC,KAAK,CACxB,+CADwB,CADP;;AAAA;AACfC,UAAAA,QADe;AAAA;AAAA,2CAIFA,QAAQ,CAACC,IAAT,EAJE;;AAAA;AAIfA,UAAAA,IAJe;AAAA,2CAKZA,IALY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;AAeA,IAAIC,QAAQ,GAAG,EAAf;AACA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BC,UAAAA,GAD6B,GACvBP,YAAY,GACnBQ,IADO,CAEN,kBAAOC,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQC,oBAAAA,CAFR,GAEa,IAAIC,OAAJ,CAAa,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEhBC,8BAAAA,aAFgB,GAEAL,UAAU,CAACM,OAAX,CAAmBX,QAAnB,CAFA;;AAAA,oCAGlBU,aAAa,KAAKL,UAAU,CAACO,MAAX,GAAoB,CAHpB;AAAA;AAAA;AAAA;;AAAA,gEAG8BJ,OAAO,CAAC,MAAD,CAHrC;;AAAA;AAKtB,kCAAI,CAACR,QAAL,EAAe;AACba,gCAAAA,MAAM,GAAG,mBAAIR,UAAJ,EAAgBS,KAAhB,CAAsB,CAAtB,EAAyBZ,GAAzB,CAAT;AACAF,gCAAAA,QAAQ,GAAG,mBAAIa,MAAJ,EAAYE,GAAZ,EAAX;AACD,+BAHD,MAGO;AACCC,gCAAAA,QADD,GACYX,UAAU,CAACM,OAAX,CAAmBX,QAAnB,IAA+B,CAD3C;AAELa,gCAAAA,MAAM,GAAG,mBAAIR,UAAJ,EAAgBS,KAAhB,CAAsBE,QAAtB,EAAgCd,GAAG,GAAGc,QAAtC,CAAT;AACAhB,gCAAAA,QAAQ,GAAG,mBAAIa,MAAJ,EAAYE,GAAZ,EAAX;AACD;;AACDE,8BAAAA,UAAU,CAAC,YAAM;AACfT,gCAAAA,OAAO,CAACK,MAAD,CAAP;AACD,+BAFS,EAEP,IAFO,CAAV;;AAbsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAb,CAFb;AAoBEK,oBAAAA,OAAO,CAACC,GAAR,CAAYb,CAAZ;;AApBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFM,CADuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B","sourcesContent":["\r\n\r\n// HTTP REQUEST\r\nconst fetch_stocks = async () => {\r\n  let response = await fetch(\r\n    'https://dumbstockapi.com/stock?exchanges=NYSE'\r\n  );\r\n  let json = await response.json();\r\n  return json;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// splits fetched json data array into chunks that are going to be requested whenever user scrolls\r\n\r\n\r\nlet lastItem = '';\r\nexport const fetch_rendered_data = async qty => {\r\n  let arr = fetch_stocks()\r\n    .then(\r\n      async (arr_object) => {\r\n\r\n        const p =  new Promise( async (resolve, reject) => {\r\n          let newArr;\r\n          const lastItemIndex = arr_object.indexOf(lastItem);\r\n          if (lastItemIndex === arr_object.length - 1) return resolve('done');\r\n\r\n          if (!lastItem) {\r\n            newArr = [...arr_object].slice(0, qty);\r\n            lastItem = [...newArr].pop();\r\n          } else {\r\n            const newIndex = arr_object.indexOf(lastItem) + 1;\r\n            newArr = [...arr_object].slice(newIndex, qty + newIndex);\r\n            lastItem = [...newArr].pop();\r\n          }\r\n          setTimeout(() => {\r\n            resolve(newArr);\r\n          }, 1000);\r\n          \r\n        });\r\n        console.log(p)\r\n      })\r\n}"]},"metadata":{},"sourceType":"module"}