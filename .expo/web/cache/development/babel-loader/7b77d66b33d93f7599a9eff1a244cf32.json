{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar fetch_stocks = function fetch_stocks() {\n  var response = fetch('https://dumbstockapi.com/stock?exchanges=NYSE');\n  var json = response.json();\n  return json;\n};\n\nvar arr = fetch_stocks();\nvar lastItem = '';\nexport var fetch_rendered_data = function fetch_rendered_data(qty) {\n  return _regeneratorRuntime.async(function fetch_rendered_data$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n            var newArr;\n            var lastItemIndex = arr.indexOf(lastItem);\n            if (lastItemIndex === arr.length - 1) return resolve('done');\n\n            if (!lastItem) {\n              newArr = _toConsumableArray(arr).slice(0, qty);\n              lastItem = _toConsumableArray(newArr).pop();\n            } else {\n              var newIndex = arr.indexOf(lastItem) + 1;\n              newArr = _toConsumableArray(arr).slice(newIndex, qty + newIndex);\n              lastItem = _toConsumableArray(newArr).pop();\n            }\n\n            setTimeout(function () {\n              resolve(newArr);\n            }, 1000);\n          }));\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["C:/Users/affan/Desktop/JavaScript/REACT/projects/ticVoter/DataServer.js"],"names":["fetch_stocks","response","fetch","json","arr","lastItem","fetch_rendered_data","qty","Promise","resolve","reject","newArr","lastItemIndex","indexOf","length","slice","pop","newIndex","setTimeout"],"mappings":";;;AAGA,IAAMA,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,MAAIC,QAAQ,GAAGC,KAAK,CAClB,+CADkB,CAApB;AAGA,MAAIC,IAAI,GAAGF,QAAQ,CAACE,IAAT,EAAX;AACA,SAAOA,IAAP;AACD,CAND;;AAaA,IAAMC,GAAG,GAAGJ,YAAY,EAAxB;AAGA,IAAIK,QAAQ,GAAG,EAAf;AACA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA,2CACjC,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B,gBAAIC,MAAJ;AACA,gBAAMC,aAAa,GAAGR,GAAG,CAACS,OAAJ,CAAYR,QAAZ,CAAtB;AACA,gBAAIO,aAAa,KAAKR,GAAG,CAACU,MAAJ,GAAa,CAAnC,EAAsC,OAAOL,OAAO,CAAC,MAAD,CAAd;;AAEtC,gBAAI,CAACJ,QAAL,EAAe;AACbM,cAAAA,MAAM,GAAG,mBAAIP,GAAJ,EAASW,KAAT,CAAe,CAAf,EAAkBR,GAAlB,CAAT;AACAF,cAAAA,QAAQ,GAAG,mBAAIM,MAAJ,EAAYK,GAAZ,EAAX;AACD,aAHD,MAGO;AACL,kBAAMC,QAAQ,GAAGb,GAAG,CAACS,OAAJ,CAAYR,QAAZ,IAAwB,CAAzC;AACAM,cAAAA,MAAM,GAAG,mBAAIP,GAAJ,EAASW,KAAT,CAAeE,QAAf,EAAyBV,GAAG,GAAGU,QAA/B,CAAT;AACAZ,cAAAA,QAAQ,GAAG,mBAAIM,MAAJ,EAAYK,GAAZ,EAAX;AACD;;AACDE,YAAAA,UAAU,CAAC,YAAM;AACfT,cAAAA,OAAO,CAACE,MAAD,CAAP;AACD,aAFS,EAEP,IAFO,CAAV;AAGD,WAhBD,CADiC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B","sourcesContent":["\r\n\r\n// HTTP REQUEST\r\nconst fetch_stocks = () => {\r\n  let response = fetch(\r\n    'https://dumbstockapi.com/stock?exchanges=NYSE'\r\n  );\r\n  let json = response.json();\r\n  return json ;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// splits fetched json data array into chunks that are going to be requested whenever user scrolls\r\nconst arr = fetch_stocks()\r\n\r\n\r\nlet lastItem = '';\r\nexport const fetch_rendered_data = async qty =>\r\n  new Promise((resolve, reject) => {\r\n    let newArr;\r\n    const lastItemIndex = arr.indexOf(lastItem);\r\n    if (lastItemIndex === arr.length - 1) return resolve('done');\r\n\r\n    if (!lastItem) {\r\n      newArr = [...arr].slice(0, qty);\r\n      lastItem = [...newArr].pop();\r\n    } else {\r\n      const newIndex = arr.indexOf(lastItem) + 1;\r\n      newArr = [...arr].slice(newIndex, qty + newIndex);\r\n      lastItem = [...newArr].pop();\r\n    }\r\n    setTimeout(() => {\r\n      resolve(newArr);\r\n    }, 1000);\r\n  });"]},"metadata":{},"sourceType":"module"}