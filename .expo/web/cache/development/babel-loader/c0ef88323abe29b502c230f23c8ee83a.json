{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport React, { useEffect, useState } from 'react';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar VoteCardScreen = function VoteCardScreen(_ref) {\n  var route = _ref.route;\n\n  var up_vote = function up_vote() {\n    var response, json;\n    return _regeneratorRuntime.async(function up_vote$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch('https://dumbstockapi.com/stock?exchanges=NASDAQ'));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            json = _context.sent;\n            return _context.abrupt(\"return\", json);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  fetch('Your URL to fetch data from', {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      firstParam: 'yourValue',\n      secondParam: 'yourOtherValue'\n    })\n  });\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsxs(Text, {\n      children: [route.params.data.name, \" | \", route.params.data.ticker]\n    }), _jsxs(Text, {\n      children: [\"ETF? \", route.params.data.is_etf ? \"yes\" : \"no\"]\n    }), _jsx(Text, {\n      children: route.params.data.exchange\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n});\nexport default VoteCardScreen;","map":{"version":3,"sources":["C:/Users/affan/Desktop/JavaScript/REACT/projects/ticVoter/screens/VoteCardScreen.js"],"names":["React","useEffect","useState","VoteCardScreen","route","up_vote","fetch","response","json","method","headers","Accept","body","JSON","stringify","firstParam","secondParam","styles","container","params","data","name","ticker","is_etf","exchange","StyleSheet","create","flex","justifyContent","alignItems"],"mappings":";;;;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;AAMA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,OAAe;AAAA,MAAZC,KAAY,QAAZA,KAAY;;AAMpC,MAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACOC,KAAK,CAEtB,iDAFsB,CADZ;;AAAA;AACVC,YAAAA,QADU;AAAA;AAAA,6CAKGA,QAAQ,CAACC,IAAT,EALH;;AAAA;AAKVA,YAAAA,IALU;AAAA,6CAMPA,IANO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAeFF,EAAAA,KAAK,CAAC,6BAAD,EAAgC;AACjCG,IAAAA,MAAM,EAAE,MADyB;AAEjCC,IAAAA,OAAO,EAAE;AACLC,MAAAA,MAAM,EAAE,kBADH;AAEL,sBAAgB;AAFX,KAFwB;AAMjCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBC,MAAAA,UAAU,EAAE,WADK;AAEjBC,MAAAA,WAAW,EAAE;AAFI,KAAf;AAN2B,GAAhC,CAAL;AAYA,SACI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAAA,eAEI,MAAC,IAAD;AAAA,iBAAOd,KAAK,CAACe,MAAN,CAAaC,IAAb,CAAkBC,IAAzB,SAAkCjB,KAAK,CAACe,MAAN,CAAaC,IAAb,CAAkBE,MAApD;AAAA,MAFJ,EAGI,MAAC,IAAD;AAAA,0BAAYlB,KAAK,CAACe,MAAN,CAAaC,IAAb,CAAkBG,MAAlB,GAA2B,KAA3B,GAAmC,IAA/C;AAAA,MAHJ,EAII,KAAC,IAAD;AAAA,gBAAOnB,KAAK,CAACe,MAAN,CAAaC,IAAb,CAAkBI;AAAzB,MAJJ;AAAA,IADJ;AAUC,CA3CD;;AAkDA,IAAMP,MAAM,GAAGQ,UAAU,CAACC,MAAX,CACX;AACIR,EAAAA,SAAS,EAAE;AACPS,IAAAA,IAAI,EAAE,CADC;AAEPC,IAAAA,cAAc,EAAE,QAFT;AAGPC,IAAAA,UAAU,EAAE;AAHL;AADf,CADW,CAAf;AAeA,eAAe1B,cAAf","sourcesContent":["import { StyleSheet, Text, TouchableOpacity, View, ScrollView } from 'react-native'\r\nimport React, { useEffect, useState } from 'react'\r\n\r\n\r\n\r\n\r\n\r\nconst VoteCardScreen = ({ route }) => {\r\n\r\n\r\n\r\n\r\n  // HTTP REQUEST\r\n  const up_vote = async () => {\r\n    let response = await fetch(\r\n        // `${CONFIG.base_url}/api/build_internal`\r\n        'https://dumbstockapi.com/stock?exchanges=NASDAQ'\r\n    );\r\n    let json = await response.json();\r\n    return json;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfetch('Your URL to fetch data from', {\r\n    method: 'POST',\r\n    headers: {\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({\r\n        firstParam: 'yourValue',\r\n        secondParam: 'yourOtherValue',\r\n    }),\r\n});\r\n\r\nreturn (\r\n    <View style={styles.container}>\r\n\r\n        <Text>{route.params.data.name} | {route.params.data.ticker}</Text>\r\n        <Text>ETF? {route.params.data.is_etf ? \"yes\" : \"no\"}</Text>\r\n        <Text>{route.params.data.exchange}</Text>\r\n\r\n\r\n    </View>\r\n)\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst styles = StyleSheet.create(\r\n    {\r\n        container: {\r\n            flex: 1,\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n        },\r\n    }\r\n)\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default VoteCardScreen\r\n"]},"metadata":{},"sourceType":"module"}