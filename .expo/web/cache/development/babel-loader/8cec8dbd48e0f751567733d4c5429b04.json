{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar fetch_stocks = function fetch_stocks() {\n  var response, json;\n  return _regeneratorRuntime.async(function fetch_stocks$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://dumbstockapi.com/stock?exchanges=NYSE'));\n\n        case 2:\n          response = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 5:\n          json = _context.sent;\n          return _context.abrupt(\"return\", json);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar lastItem = '';\n\nvar chunking = function chunking(qty, arr_object, lastItemIndex) {\n  var newArr;\n  if (lastItemIndex === arr_object.length - 1) return [\"done\"];\n  newArr = _toConsumableArray(arr_object).slice(lastItemIndex, qty + lastItemIndex);\n  lastItem = _toConsumableArray(arr_object).pop();\n  return newArr;\n};\n\nexport var fetch_rendered_data = function fetch_rendered_data(qty, index) {\n  var arr = fetch_stocks().then(function (promise_object) {\n    return chunking(qty, promise_object, index);\n  });\n  return arr;\n};","map":{"version":3,"sources":["C:/Users/affan/Desktop/JavaScript/REACT/projects/ticVoter/DataServer.js"],"names":["fetch_stocks","fetch","response","json","lastItem","chunking","qty","arr_object","lastItemIndex","newArr","length","slice","pop","fetch_rendered_data","index","arr","then","promise_object"],"mappings":";;;AAGA,IAAMA,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACEC,KAAK,CACxB,+CADwB,CADP;;AAAA;AACfC,UAAAA,QADe;AAAA;AAAA,2CAIFA,QAAQ,CAACC,IAAT,EAJE;;AAAA;AAIfA,UAAAA,IAJe;AAAA,2CAKZA,IALY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;AAYA,IAAIC,QAAQ,GAAG,EAAf;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAMC,UAAN,EAAkBC,aAAlB,EAAoC;AACnD,MAAIC,MAAJ;AAGA,MAAID,aAAa,KAAKD,UAAU,CAACG,MAAX,GAAoB,CAA1C,EAA6C,OAAO,CAAC,MAAD,CAAP;AAG7CD,EAAAA,MAAM,GAAG,mBAAIF,UAAJ,EAAgBI,KAAhB,CAAsBH,aAAtB,EAAqCF,GAAG,GAAGE,aAA3C,CAAT;AACAJ,EAAAA,QAAQ,GAAG,mBAAIG,UAAJ,EAAgBK,GAAhB,EAAX;AAEA,SAAOH,MAAP;AAED,CAZD;;AAiBA,OAAO,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACP,GAAD,EAAMQ,KAAN,EAAgB;AACjD,MAAMC,GAAG,GAAGf,YAAY,GACrBgB,IADS,CACJ,UAAAC,cAAc;AAAA,WAAIZ,QAAQ,CAACC,GAAD,EAAMW,cAAN,EAAsBH,KAAtB,CAAZ;AAAA,GADV,CAAZ;AAGA,SAAOC,GAAP;AACD,CALM","sourcesContent":["\r\n\r\n// HTTP REQUEST\r\nconst fetch_stocks = async () => {\r\n  let response = await fetch(\r\n    'https://dumbstockapi.com/stock?exchanges=NYSE'\r\n  );\r\n  let json = await response.json();\r\n  return json;\r\n}\r\n\r\n\r\n\r\n// CHUNK API REQUEST DATA \r\n\r\nvar lastItem = '';\r\nconst chunking = (qty, arr_object, lastItemIndex) => {\r\n  let newArr;\r\n\r\n  // check if list complete\r\n  if (lastItemIndex === arr_object.length - 1) return [\"done\"];\r\n\r\n  // update chunk span\r\n  newArr = [...arr_object].slice(lastItemIndex, qty + lastItemIndex);\r\n  lastItem = [...arr_object].pop();\r\n\r\n  return newArr\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport const fetch_rendered_data = (qty, index) => {\r\n  const arr = fetch_stocks()\r\n    .then(promise_object => chunking(qty, promise_object, index))\r\n  // console.log(arr)\r\n  return arr;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}