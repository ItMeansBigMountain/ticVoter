{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { fetch_rendered_data } from \"../DataServer\";\nimport { useNavigation } from '@react-navigation/core';\nimport { Server_object } from \"../DataServer.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar stopFetchMore = true;\n\nvar _ListFooterComponent = function ListFooterComponent() {\n  return _jsx(Text, {\n    style: {\n      fontSize: 16,\n      fontWeight: 'bold',\n      textAlign: 'center',\n      padding: 5\n    },\n    children: \"Loading...\"\n  });\n};\n\nvar ScrollLoad = function ScrollLoad() {\n  var navigation = useNavigation();\n  var quantity_rendered = 20;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      render_index = _useState4[0],\n      set_render_index = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loadingMore = _useState6[0],\n      setLoadingMore = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      search = _useState8[0],\n      setSearch = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      all_data = _useState10[0],\n      set_allData = _useState10[1];\n\n  useEffect(function _callee() {\n    var build_data, d;\n    return _regeneratorRuntime.async(function _callee$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            updateData();\n\n            build_data = function build_data() {\n              return _regeneratorRuntime.async(function build_data$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      fetch('https://dumbstockapi.com/stock?exchanges=NYSE').then(function (response) {\n                        return response.json();\n                      }).then(function (json) {\n                        return setStocksData(json);\n                      }).catch(function (error) {\n                        return console.error(error);\n                      }).finally(function () {\n                        return setLoading(false);\n                      });\n\n                    case 1:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            };\n\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(build_data());\n\n          case 4:\n            d = _context2.sent;\n            console.log(d);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }, []);\n\n  var renderItem = function renderItem(_ref) {\n    var item = _ref.item;\n    return _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        navigation.navigate(\"Vote\", {\n          data: item\n        });\n      },\n      style: styles.stock_button,\n      activeOpacity: 0.25,\n      children: _jsxs(Text, {\n        title: styles.stuck_button_text,\n        children: [item.ticker, \"  : \", item.name]\n      })\n    });\n  };\n\n  var updateData = function updateData() {\n    var response;\n    return _regeneratorRuntime.async(function updateData$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            set_render_index(render_index + quantity_rendered);\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(fetch_rendered_data(quantity_rendered, render_index));\n\n          case 3:\n            response = _context3.sent;\n            if (response) setData(_toConsumableArray(response));else setData([\"error\", \"DataServer.js\", \"didnt return the promise\"]);\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleOnEndReached = function handleOnEndReached() {\n    var response;\n    return _regeneratorRuntime.async(function handleOnEndReached$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            setLoadingMore(true);\n\n            if (stopFetchMore) {\n              _context4.next = 10;\n              break;\n            }\n\n            _context4.next = 4;\n            return _regeneratorRuntime.awrap(fetch_rendered_data(quantity_rendered, render_index));\n\n          case 4:\n            response = _context4.sent;\n\n            if (!(response === 'done')) {\n              _context4.next = 7;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", setLoadingMore(false));\n\n          case 7:\n            stopFetchMore = true;\n            setData([].concat(_toConsumableArray(data), _toConsumableArray(response)));\n            set_render_index(render_index + quantity_rendered);\n\n          case 10:\n            setLoadingMore(false);\n\n          case 11:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var searchFilterFunction = function searchFilterFunction(text) {\n    if (text) {\n      var newData = data.filter(function (item) {\n        console.log(item);\n        var itemData = item.name.toUpperCase().includes(text.toUpperCase()) ? item.ticker : '';\n        var textData = text.toUpperCase();\n        return itemData.indexOf(textData) > -1;\n      });\n      setData(newData);\n      setSearch(text);\n    } else {\n      setSearch(text);\n      set_render_index(0);\n      updateData();\n    }\n  };\n\n  return _jsxs(View, {\n    children: [_jsx(View, {\n      style: styles.container,\n      children: _jsx(TextInput, {\n        style: styles.textInputStyle,\n        onChangeText: function onChangeText(text) {\n          return searchFilterFunction(text);\n        },\n        value: search,\n        underlineColorAndroid: \"transparent\",\n        placeholder: \"Search Here\"\n      })\n    }), _jsx(FlatList, {\n      data: data,\n      keyExtractor: function keyExtractor(item) {\n        return data.indexOf(item);\n      },\n      renderItem: renderItem,\n      onEndReached: handleOnEndReached,\n      onEndReachedThreshold: 0.01,\n      onScrollBeginDrag: function onScrollBeginDrag() {\n        stopFetchMore = false;\n      },\n      ListFooterComponent: function ListFooterComponent() {\n        return loadingMore && _jsx(_ListFooterComponent, {});\n      }\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    margin: 50\n  },\n  stock_button: {\n    textAlign: 'center',\n    fontWeight: 'bold',\n    fontSize: 20,\n    padding: 15,\n    borderBottomColor: 'red',\n    borderBottomWidth: 2\n  },\n  stuck_button_text: {\n    textAlign: 'center',\n    fontWeight: 'bold',\n    fontSize: 20,\n    padding: 15,\n    borderBottomColor: 'red',\n    borderBottomWidth: 2\n  },\n  itemStyle: {\n    padding: 10\n  },\n  textInputStyle: {\n    height: 40,\n    borderWidth: 1,\n    paddingLeft: 20,\n    margin: 50,\n    borderColor: '#009688',\n    backgroundColor: '#FFFFFF'\n  }\n});\nexport default ScrollLoad;","map":{"version":3,"sources":["C:/Users/affan/Desktop/JavaScript/REACT/projects/ticVoter/components/ScrollLoad.js"],"names":["React","useEffect","useState","fetch_rendered_data","useNavigation","Server_object","stopFetchMore","ListFooterComponent","fontSize","fontWeight","textAlign","padding","ScrollLoad","navigation","quantity_rendered","data","setData","render_index","set_render_index","loadingMore","setLoadingMore","search","setSearch","all_data","set_allData","updateData","build_data","fetch","then","response","json","setStocksData","catch","error","console","finally","setLoading","d","log","renderItem","item","navigate","styles","stock_button","stuck_button_text","ticker","name","handleOnEndReached","searchFilterFunction","text","newData","filter","itemData","toUpperCase","includes","textData","indexOf","container","textInputStyle","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","margin","borderBottomColor","borderBottomWidth","itemStyle","height","borderWidth","paddingLeft","borderColor"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { FlatList, StyleSheet, Text, View, TouchableOpacity, TextInput } from 'react-native';\r\nimport { fetch_rendered_data } from '../DataServer';\r\nimport { useNavigation } from '@react-navigation/core';\r\n\r\nimport { Server_object } from '../DataServer.js';\r\n\r\n// check to halt load requests\r\nlet stopFetchMore = true;\r\n\r\n\r\n\r\n// LOADING VIEW\r\nconst ListFooterComponent = () => (\r\n    <Text\r\n        style={{\r\n            fontSize: 16,\r\n            fontWeight: 'bold',\r\n            textAlign: 'center',\r\n            padding: 5,\r\n        }}\r\n    >\r\n        Loading...\r\n    </Text>\r\n);\r\n\r\n\r\n\r\n\r\n// MAIN COMPONENT\r\nconst ScrollLoad = () => {\r\n\r\n    const navigation = useNavigation()\r\n\r\n    const quantity_rendered = 20;\r\n    const [data, setData] = useState([]);\r\n    const [render_index, set_render_index] = useState(0);\r\n    const [loadingMore, setLoadingMore] = useState(false);\r\n    const [search, setSearch] = useState('');\r\n    const [all_data, set_allData] = useState([]);\r\n\r\n\r\n\r\n\r\n    // HOOK : on page render\r\n    useEffect(async () => {\r\n        updateData()\r\n\r\n\r\n\r\n\r\n        const build_data = async () => {\r\n            fetch('https://dumbstockapi.com/stock?exchanges=NYSE')\r\n                .then((response) => response.json())\r\n                .then((json) => setStocksData(json))\r\n                .catch((error) => console.error(error))\r\n                .finally(() => setLoading(false));\r\n        }\r\n\r\n\r\n        const d = await build_data()\r\n\r\n        console.log(d)\r\n    }, []);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // DATA ARRAY ITEM VIEW\r\n    const renderItem = ({ item }) => {\r\n        return (\r\n            <TouchableOpacity\r\n                onPress={() => {\r\n                    navigation.navigate(\"Vote\", { data: item })\r\n                }}\r\n                style={styles.stock_button}\r\n                activeOpacity={0.25}\r\n            >\r\n                <Text title={styles.stuck_button_text} >\r\n                    {item.ticker}  : {item.name}\r\n                </Text>\r\n            </TouchableOpacity>\r\n        );\r\n    };\r\n\r\n\r\n    // UPDATE STATE OF DISPLAY DATA VIA SCROLL\r\n    const updateData = async () => {\r\n        set_render_index(render_index + quantity_rendered)\r\n        // gets data from server.js\r\n        const response = await fetch_rendered_data(quantity_rendered, render_index)\r\n        // check if we got data from DataServer.js\r\n        if (response) setData([...response]);\r\n        else setData([\"error\", \"DataServer.js\", \"didnt return the promise\"])\r\n    };\r\n\r\n\r\n\r\n    // load more unless server resolves done\r\n    const handleOnEndReached = async () => {\r\n        setLoadingMore(true);\r\n        if (!stopFetchMore) {\r\n            const response = await fetch_rendered_data(quantity_rendered, render_index); //fetch\r\n            if (response === 'done') return setLoadingMore(false);\r\n            stopFetchMore = true;\r\n            setData([...data, ...response]); // append to [state list]\r\n            set_render_index(render_index + quantity_rendered) // add 20 to last index\r\n        }\r\n        setLoadingMore(false);\r\n    };\r\n\r\n\r\n\r\n    // SEARCH BAR\r\n    const searchFilterFunction = (text) => {\r\n        // Check if searched text is not blank\r\n        if (text) {\r\n            const newData = data.filter(function (item) {\r\n                console.log(item)\r\n                // Applying filter for the inserted text in search bar\r\n                const itemData = item.name.toUpperCase().includes(text.toUpperCase())\r\n                    ? item.ticker\r\n                    : ''\r\n                const textData = text.toUpperCase();\r\n                return itemData.indexOf(textData) > -1;\r\n            });\r\n            setData(newData);\r\n            setSearch(text);\r\n        } else {\r\n            // Inserted text is blank\r\n            setSearch(text);\r\n            set_render_index(0)\r\n            updateData()\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <View>\r\n\r\n\r\n\r\n\r\n            {/* SEARCH */}\r\n            <View style={styles.container}>\r\n                <TextInput\r\n                    style={styles.textInputStyle}\r\n                    onChangeText={(text) => searchFilterFunction(text)}\r\n                    value={search}\r\n                    underlineColorAndroid=\"transparent\"\r\n                    placeholder=\"Search Here\"\r\n                />\r\n            </View>\r\n\r\n\r\n\r\n\r\n\r\n\r\n            {/* DISPLAY */}\r\n            <FlatList\r\n                data={data}\r\n                keyExtractor={item => data.indexOf(item)}\r\n                renderItem={renderItem}\r\n                onEndReached={handleOnEndReached}\r\n                onEndReachedThreshold={0.01}\r\n                onScrollBeginDrag={() => {\r\n                    stopFetchMore = false;\r\n                }}\r\n                ListFooterComponent={() => loadingMore && <ListFooterComponent />}\r\n            // onScroll={(event) => console.log(event)}\r\n            />\r\n\r\n\r\n\r\n        </View>\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#fff',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        margin: 50\r\n    },\r\n    stock_button: {\r\n        textAlign: 'center',\r\n        fontWeight: 'bold',\r\n        fontSize: 20,\r\n        padding: 15,\r\n        borderBottomColor: 'red',\r\n        borderBottomWidth: 2,\r\n    },\r\n    stuck_button_text: {\r\n        textAlign: 'center',\r\n        fontWeight: 'bold',\r\n        fontSize: 20,\r\n        padding: 15,\r\n        borderBottomColor: 'red',\r\n        borderBottomWidth: 2,\r\n    },\r\n\r\n    itemStyle: {\r\n        padding: 10,\r\n    },\r\n    textInputStyle: {\r\n        height: 40,\r\n        borderWidth: 1,\r\n        paddingLeft: 20,\r\n        margin: 50,\r\n        borderColor: '#009688',\r\n        backgroundColor: '#FFFFFF',\r\n    },\r\n\r\n\r\n});\r\n\r\n\r\n\r\n\r\nexport default ScrollLoad"]},"metadata":{},"sourceType":"module"}