{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar fetch_stocks = function fetch_stocks() {\n  var response, json;\n  return _regeneratorRuntime.async(function fetch_stocks$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://dumbstockapi.com/stock?exchanges=NYSE'));\n\n        case 2:\n          response = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 5:\n          json = _context.sent;\n          return _context.abrupt(\"return\", json);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar arr = fetch_stocks();\nconsole.log(arr.name);\nvar lastItem = '';\nexport var fetch_rendered_data = function fetch_rendered_data(qty) {\n  return new Promise(function (resolve, reject) {\n    var newArr;\n    var lastItemIndex = arr.indexOf(lastItem);\n    if (lastItemIndex === arr.length - 1) return resolve('done');\n\n    if (!lastItem) {\n      newArr = _toConsumableArray(arr).slice(0, qty);\n      lastItem = _toConsumableArray(newArr).pop();\n    } else {\n      var newIndex = arr.indexOf(lastItem) + 1;\n      newArr = _toConsumableArray(arr).slice(newIndex, qty + newIndex);\n      lastItem = _toConsumableArray(newArr).pop();\n    }\n\n    setTimeout(function () {\n      resolve(newArr);\n    }, 1000);\n  });\n};","map":{"version":3,"sources":["C:/Users/affan/Desktop/JavaScript/REACT/projects/ticVoter/DataServer.js"],"names":["fetch_stocks","fetch","response","json","arr","console","log","name","lastItem","fetch_rendered_data","qty","Promise","resolve","reject","newArr","lastItemIndex","indexOf","length","slice","pop","newIndex","setTimeout"],"mappings":";;;AAGA,IAAMA,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACEC,KAAK,CACxB,+CADwB,CADP;;AAAA;AACfC,UAAAA,QADe;AAAA;AAAA,2CAIFA,QAAQ,CAACC,IAAT,EAJE;;AAAA;AAIfA,UAAAA,IAJe;AAAA,2CAKZA,IALY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;AAaA,IAAIC,GAAG,GAAGJ,YAAY,EAAtB;AACAK,OAAO,CAACC,GAAR,CAAaF,GAAG,CAACG,IAAjB;AAGA,IAAIC,QAAQ,GAAG,EAAf;AACA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,GAAG;AAAA,SACpC,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B,QAAIC,MAAJ;AACA,QAAMC,aAAa,GAAGX,GAAG,CAACY,OAAJ,CAAYR,QAAZ,CAAtB;AACA,QAAIO,aAAa,KAAKX,GAAG,CAACa,MAAJ,GAAa,CAAnC,EAAsC,OAAOL,OAAO,CAAC,MAAD,CAAd;;AAEtC,QAAI,CAACJ,QAAL,EAAe;AACbM,MAAAA,MAAM,GAAG,mBAAIV,GAAJ,EAASc,KAAT,CAAe,CAAf,EAAkBR,GAAlB,CAAT;AACAF,MAAAA,QAAQ,GAAG,mBAAIM,MAAJ,EAAYK,GAAZ,EAAX;AACD,KAHD,MAGO;AACL,UAAMC,QAAQ,GAAGhB,GAAG,CAACY,OAAJ,CAAYR,QAAZ,IAAwB,CAAzC;AACAM,MAAAA,MAAM,GAAG,mBAAIV,GAAJ,EAASc,KAAT,CAAeE,QAAf,EAAyBV,GAAG,GAAGU,QAA/B,CAAT;AACAZ,MAAAA,QAAQ,GAAG,mBAAIM,MAAJ,EAAYK,GAAZ,EAAX;AACD;;AACDE,IAAAA,UAAU,CAAC,YAAM;AACfT,MAAAA,OAAO,CAACE,MAAD,CAAP;AACD,KAFS,EAEP,IAFO,CAAV;AAGD,GAhBD,CADoC;AAAA,CAA/B","sourcesContent":["\r\n\r\n// HTTP REQUEST\r\nconst fetch_stocks = async () => {\r\n  let response = await fetch(\r\n    'https://dumbstockapi.com/stock?exchanges=NYSE'\r\n  );\r\n  let json = await response.json();\r\n  return json ;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// splits fetched json data array into chunks that are going to be requested whenever user scrolls\r\nlet arr = fetch_stocks() \r\nconsole.log( arr.name   );\r\n\r\n\r\nlet lastItem = '';\r\nexport const fetch_rendered_data = qty =>\r\n  new Promise((resolve, reject) => {\r\n    let newArr;\r\n    const lastItemIndex = arr.indexOf(lastItem);\r\n    if (lastItemIndex === arr.length - 1) return resolve('done');\r\n\r\n    if (!lastItem) {\r\n      newArr = [...arr].slice(0, qty);\r\n      lastItem = [...newArr].pop();\r\n    } else {\r\n      const newIndex = arr.indexOf(lastItem) + 1;\r\n      newArr = [...arr].slice(newIndex, qty + newIndex);\r\n      lastItem = [...newArr].pop();\r\n    }\r\n    setTimeout(() => {\r\n      resolve(newArr);\r\n    }, 1000);\r\n  });"]},"metadata":{},"sourceType":"module"}