{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar Server_object = _createClass(function Server_object(lastItem) {\n  _classCallCheck(this, Server_object);\n\n  this.lastItem = lastItem;\n  this.all_stocks = [];\n  fetch_stocks().then(function (r) {\n    return r;\n  });\n});\n\nServer_object.fetch_stocks = function _callee() {\n  var response, json;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://dumbstockapi.com/stock?exchanges=NYSE'));\n\n        case 2:\n          response = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 5:\n          json = _context.sent;\n          return _context.abrupt(\"return\", json);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nServer_object.chunking = function (qty, arr_object, lastItemIndex) {\n  var newArr;\n  if (lastItemIndex === arr_object.length - 1) return [\"done\"];\n\n  if (!Server_object.lastItem) {\n    console.log('>>>>>> onEvent()  ', lastItemIndex);\n    newArr = _toConsumableArray(arr_object).slice(0, qty);\n    Server_object.lastItem = _toConsumableArray(newArr).pop();\n  } else {\n    console.log('<<<<<< updating  ', lastItemIndex);\n    newArr = _toConsumableArray(arr_object).slice(lastItemIndex, qty + lastItemIndex);\n    Server_object.lastItem = _toConsumableArray(arr_object).pop();\n  }\n\n  return newArr;\n};\n\nvar s = Server_object;\nexport var fetch_rendered_data = function fetch_rendered_data(qty, index) {\n  console.log(s.toString());\n  var arr = s.fetch_stocks().then(function (promise_object) {\n    return s.chunking(qty, promise_object, index);\n  });\n  return arr;\n};","map":{"version":3,"sources":["C:/Users/affan/Desktop/JavaScript/REACT/projects/ticVoter/DataServer.js"],"names":["Server_object","lastItem","all_stocks","fetch_stocks","then","r","fetch","response","json","chunking","qty","arr_object","lastItemIndex","newArr","length","console","log","slice","pop","s","fetch_rendered_data","index","toString","arr","promise_object"],"mappings":";;;;;IAEMA,a,gBACJ,uBAAYC,QAAZ,EAAsB;AAAA;;AACpB,OAAKA,QAAL,GAAgBA,QAAhB;AACA,OAAKC,UAAL,GAAkB,EAAlB;AACAC,EAAAA,YAAY,GACXC,IADD,CACO,UAAAC,CAAC;AAAA,WAAIA,CAAJ;AAAA,GADR;AAED,C;;AANGL,a,CAcGG,Y,GAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACCG,KAAK,CACxB,+CADwB,CADN;;AAAA;AAChBC,UAAAA,QADgB;AAAA;AAAA,2CAIHA,QAAQ,CAACC,IAAT,EAJG;;AAAA;AAIhBA,UAAAA,IAJgB;AAAA,2CAKbA,IALa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C;;AAdlBR,a,CAwBGS,Q,GAAW,UAACC,GAAD,EAAMC,UAAN,EAAkBC,aAAlB,EAAoC;AACpD,MAAIC,MAAJ;AAGA,MAAID,aAAa,KAAKD,UAAU,CAACG,MAAX,GAAoB,CAA1C,EAA6C,OAAO,CAAC,MAAD,CAAP;;AAG7C,MAAI,CA/BFd,aA+BG,CAAKC,QAAV,EAAoB;AAClBc,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCJ,aAAlC;AACAC,IAAAA,MAAM,GAAG,mBAAIF,UAAJ,EAAgBM,KAAhB,CAAsB,CAAtB,EAAyBP,GAAzB,CAAT;AAjCAV,IAAAA,aAkCA,CAAKC,QAAL,GAAgB,mBAAIY,MAAJ,EAAYK,GAAZ,EAAhB;AACD,GAJD,MAOK;AACHH,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCJ,aAAjC;AACAC,IAAAA,MAAM,GAAG,mBAAIF,UAAJ,EAAgBM,KAAhB,CAAsBL,aAAtB,EAAqCF,GAAG,GAAGE,aAA3C,CAAT;AAxCAZ,IAAAA,aAyCA,CAAKC,QAAL,GAAgB,mBAAIU,UAAJ,EAAgBO,GAAhB,EAAhB;AACD;;AAED,SAAOL,MAAP;AAED,C;;AAYH,IAAMM,CAAC,GAAGnB,aAAV;AAKA,OAAO,IAAMoB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACV,GAAD,EAAMW,KAAN,EAAgB;AACjDN,EAAAA,OAAO,CAACC,GAAR,CAAYG,CAAC,CAACG,QAAF,EAAZ;AACA,MAAMC,GAAG,GAAGJ,CAAC,CAAChB,YAAF,GACTC,IADS,CACJ,UAAAoB,cAAc;AAAA,WAAIL,CAAC,CAACV,QAAF,CAAWC,GAAX,EAAgBc,cAAhB,EAAgCH,KAAhC,CAAJ;AAAA,GADV,CAAZ;AAGA,SAAOE,GAAP;AACD,CANM","sourcesContent":["\r\n\r\nclass Server_object {\r\n  constructor(lastItem) {\r\n    this.lastItem = lastItem;\r\n    this.all_stocks = []\r\n    fetch_stocks()\r\n    .then( r => r)\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // HTTP REQUEST\r\n  static fetch_stocks = async () => {\r\n    let response = await fetch(\r\n      'https://dumbstockapi.com/stock?exchanges=NYSE'\r\n    );\r\n    let json = await response.json();\r\n    return json;\r\n  }\r\n\r\n\r\n  // CHUNK API REQUEST DATA \r\n  static chunking = (qty, arr_object, lastItemIndex) => {\r\n    let newArr;\r\n\r\n    // check if list complete\r\n    if (lastItemIndex === arr_object.length - 1) return [\"done\"];\r\n\r\n    // INIT all_stocks state\r\n    if (!this.lastItem) {\r\n      console.log('>>>>>> onEvent()  ', lastItemIndex)\r\n      newArr = [...arr_object].slice(0, qty);\r\n      this.lastItem = [...newArr].pop();\r\n    }\r\n\r\n    // UPDATE all_stocks state\r\n    else {\r\n      console.log('<<<<<< updating  ', lastItemIndex)\r\n      newArr = [...arr_object].slice(lastItemIndex, qty + lastItemIndex);\r\n      this.lastItem = [...arr_object].pop();\r\n    }\r\n\r\n    return newArr\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst s = Server_object \r\n\r\n\r\n\r\n\r\nexport const fetch_rendered_data = (qty, index) => {\r\n  console.log(s.toString())\r\n  const arr = s.fetch_stocks()\r\n    .then(promise_object => s.chunking(qty, promise_object, index))\r\n  // console.log(arr)\r\n  return arr;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}