{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar fetch_stocks = useCallback(function _callee() {\n  var response;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://dumbstockapi.com/stock?exchanges=NYSE'));\n\n        case 2:\n          response = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 5:\n          response = _context.sent;\n          return _context.abrupt(\"return\", response);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}, []);\nvar lastItem = '';\nexport var fetch_rendered_data = function fetch_rendered_data(qty) {\n  var output, arr;\n  return _regeneratorRuntime.async(function fetch_rendered_data$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          arr = fetch_stocks().then(function _callee3(arr_object) {\n            return _regeneratorRuntime.async(function _callee3$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    new Promise(function _callee2(resolve, reject) {\n                      var newArr, lastItemIndex, newIndex;\n                      return _regeneratorRuntime.async(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              lastItemIndex = arr_object.indexOf(lastItem);\n\n                              if (!(lastItemIndex === arr_object.length - 1)) {\n                                _context2.next = 3;\n                                break;\n                              }\n\n                              return _context2.abrupt(\"return\", resolve('done'));\n\n                            case 3:\n                              if (!lastItem) {\n                                newArr = _toConsumableArray(arr_object).slice(0, qty);\n                                lastItem = _toConsumableArray(newArr).pop();\n                              } else {\n                                newIndex = arr_object.indexOf(lastItem) + 1;\n                                newArr = _toConsumableArray(arr_object).slice(newIndex, qty + newIndex);\n                                lastItem = _toConsumableArray(newArr).pop();\n                              }\n\n                              setTimeout(function () {\n                                resolve(newArr);\n                              }, 1000);\n                              output = newArr;\n\n                            case 6:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, null, null, null, Promise);\n                    });\n\n                  case 1:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          });\n          return _context4.abrupt(\"return\", output);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["C:/Users/affan/Desktop/JavaScript/REACT/projects/ticVoter/DataServer.js"],"names":["fetch_stocks","useCallback","fetch","response","json","lastItem","fetch_rendered_data","qty","arr","then","arr_object","Promise","resolve","reject","lastItemIndex","indexOf","length","newArr","slice","pop","newIndex","setTimeout","output"],"mappings":";;AAUA,IAAMA,YAAY,GAAGC,WAAW,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACVC,KAAK,CAAC,+CAAD,CADK;;AAAA;AAC3BC,UAAAA,QAD2B;AAAA;AAAA,2CAEdA,QAAQ,CAACC,IAAT,EAFc;;AAAA;AAE/BD,UAAAA,QAF+B;AAAA,2CAGxBA,QAHwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD,EAI7B,EAJ6B,CAAhC;AAYA,IAAIE,QAAQ,GAAG,EAAf;AACA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAG7BC,UAAAA,GAH6B,GAGvBR,YAAY,GACnBS,IADO,CAEN,kBAAOC,UAAP;AAAA;AAAA;AAAA;AAAA;AAEE,wBAAIC,OAAJ,CAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEJC,8BAAAA,aAFI,GAEYJ,UAAU,CAACK,OAAX,CAAmBV,QAAnB,CAFZ;;AAAA,oCAGNS,aAAa,KAAKJ,UAAU,CAACM,MAAX,GAAoB,CAHhC;AAAA;AAAA;AAAA;;AAAA,gEAG0CJ,OAAO,CAAC,MAAD,CAHjD;;AAAA;AAIV,kCAAI,CAACP,QAAL,EAAe;AACbY,gCAAAA,MAAM,GAAG,mBAAIP,UAAJ,EAAgBQ,KAAhB,CAAsB,CAAtB,EAAyBX,GAAzB,CAAT;AACAF,gCAAAA,QAAQ,GAAG,mBAAIY,MAAJ,EAAYE,GAAZ,EAAX;AACD,+BAHD,MAGO;AACCC,gCAAAA,QADD,GACYV,UAAU,CAACK,OAAX,CAAmBV,QAAnB,IAA+B,CAD3C;AAELY,gCAAAA,MAAM,GAAG,mBAAIP,UAAJ,EAAgBQ,KAAhB,CAAsBE,QAAtB,EAAgCb,GAAG,GAAGa,QAAtC,CAAT;AACAf,gCAAAA,QAAQ,GAAG,mBAAIY,MAAJ,EAAYE,GAAZ,EAAX;AACD;;AACDE,8BAAAA,UAAU,CAAC,YAAM;AACfT,gCAAAA,OAAO,CAACK,MAAD,CAAP;AACD,+BAFS,EAEP,IAFO,CAAV;AAGAK,8BAAAA,MAAM,GAAGL,MAAT;;AAfU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAZ;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFM,CAHuB;AAAA,4CA8B1BK,MA9B0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B","sourcesContent":["\r\n\r\n// HTTP REQUEST\r\n// const fetch_stocks = async () => {\r\n//   let response = await fetch(\r\n//     'https://dumbstockapi.com/stock?exchanges=NYSE'\r\n//   );\r\n//   let json = await response.json();\r\n//   return json;\r\n// }\r\nconst fetch_stocks = useCallback(async () => {\r\n  let response = await fetch('https://dumbstockapi.com/stock?exchanges=NYSE')\r\n  response = await response.json()\r\n  return response\r\n}, [])\r\n\r\n\r\n\r\n\r\n// splits fetched json data array into chunks that are going to be requested whenever user scrolls\r\n\r\n\r\nlet lastItem = '';\r\nexport const fetch_rendered_data = async qty => {\r\n  // fetch stocks promise\r\n  let output;\r\n  let arr = fetch_stocks()\r\n    .then(\r\n      async (arr_object) => {\r\n        // create promise to render qty amount of stocks\r\n        new Promise(async (resolve, reject) => {\r\n          let newArr;\r\n          const lastItemIndex = arr_object.indexOf(lastItem);\r\n          if (lastItemIndex === arr_object.length - 1) return resolve('done');\r\n          if (!lastItem) {\r\n            newArr = [...arr_object].slice(0, qty);\r\n            lastItem = [...newArr].pop();\r\n          } else {\r\n            const newIndex = arr_object.indexOf(lastItem) + 1;\r\n            newArr = [...arr_object].slice(newIndex, qty + newIndex);\r\n            lastItem = [...newArr].pop();\r\n          }\r\n          setTimeout(() => {\r\n            resolve(newArr);\r\n          }, 1000);\r\n          output = newArr\r\n        })\r\n        // DEBUG\r\n        // console.log(arr_object)\r\n        \r\n      }\r\n    )\r\n\r\n  return output\r\n}"]},"metadata":{},"sourceType":"module"}