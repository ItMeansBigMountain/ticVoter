{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar fetch_stocks = function fetch_stocks() {\n  var response, json;\n  return _regeneratorRuntime.async(function fetch_stocks$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://dumbstockapi.com/stock?exchanges=NYSE'));\n\n        case 2:\n          response = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 5:\n          json = _context.sent;\n          return _context.abrupt(\"return\", json);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar chunking = function chunking(qty, arr_object) {\n  var lastItem = '';\n  var newArr;\n  var lastItemIndex = arr_object.indexOf(lastItem);\n  if (lastItemIndex === arr_object.length - 1) return resolve('done');\n\n  if (!lastItem) {\n    newArr = _toConsumableArray(arr_object).slice(0, qty);\n    lastItem = _toConsumableArray(newArr).pop();\n  } else {\n    var newIndex = arr_object.indexOf(lastItem) + 1;\n    newArr = _toConsumableArray(arr_object).slice(newIndex, qty + newIndex);\n    lastItem = _toConsumableArray(newArr).pop();\n  }\n\n  return newArr;\n};\n\nexport var fetch_rendered_data = function fetch_rendered_data(qty) {\n  var arr;\n  return _regeneratorRuntime.async(function fetch_rendered_data$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          arr = fetch_stocks().then(function (promise_object) {\n            return chunking(qty, promise_object);\n          }).then(function (chunk) {\n            return chunking(qty, promise_object);\n          });\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(arr);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["C:/Users/affan/Desktop/JavaScript/REACT/projects/ticVoter/DataServer.js"],"names":["fetch_stocks","fetch","response","json","chunking","qty","arr_object","lastItem","newArr","lastItemIndex","indexOf","length","resolve","slice","pop","newIndex","fetch_rendered_data","arr","then","promise_object","chunk"],"mappings":";;;AAGA,IAAMA,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACEC,KAAK,CACxB,+CADwB,CADP;;AAAA;AACfC,UAAAA,QADe;AAAA;AAAA,2CAIFA,QAAQ,CAACC,IAAT,EAJE;;AAAA;AAIfA,UAAAA,IAJe;AAAA,2CAKZA,IALY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;AAWA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAMC,UAAN,EAAqB;AACpC,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,MAAJ;AACA,MAAMC,aAAa,GAAGH,UAAU,CAACI,OAAX,CAAmBH,QAAnB,CAAtB;AACA,MAAIE,aAAa,KAAKH,UAAU,CAACK,MAAX,GAAoB,CAA1C,EAA6C,OAAOC,OAAO,CAAC,MAAD,CAAd;;AAC7C,MAAI,CAACL,QAAL,EAAe;AACbC,IAAAA,MAAM,GAAG,mBAAIF,UAAJ,EAAgBO,KAAhB,CAAsB,CAAtB,EAAyBR,GAAzB,CAAT;AACAE,IAAAA,QAAQ,GAAG,mBAAIC,MAAJ,EAAYM,GAAZ,EAAX;AACD,GAHD,MAGO;AACL,QAAMC,QAAQ,GAAGT,UAAU,CAACI,OAAX,CAAmBH,QAAnB,IAA+B,CAAhD;AACAC,IAAAA,MAAM,GAAG,mBAAIF,UAAJ,EAAgBO,KAAhB,CAAsBE,QAAtB,EAAgCV,GAAG,GAAGU,QAAtC,CAAT;AACAR,IAAAA,QAAQ,GAAG,mBAAIC,MAAJ,EAAYM,GAAZ,EAAX;AACD;;AAID,SAAON,MAAP;AAED,CAlBD;;AAuBA,OAAO,IAAMQ,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAMX,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BY,UAAAA,GAD2B,GACrBjB,YAAY,GACrBkB,IADS,CACJ,UAAAC,cAAc;AAAA,mBAAIf,QAAQ,CAACC,GAAD,EAAMc,cAAN,CAAZ;AAAA,WADV,EAETD,IAFS,CAEJ,UAAAE,KAAK;AAAA,mBAAIhB,QAAQ,CAACC,GAAD,EAAMc,cAAN,CAAZ;AAAA,WAFD,CADqB;AAAA;AAAA,2CAK3BF,GAL2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B","sourcesContent":["\r\n\r\n// HTTP REQUEST\r\nconst fetch_stocks = async () => {\r\n  let response = await fetch(\r\n    'https://dumbstockapi.com/stock?exchanges=NYSE'\r\n  );\r\n  let json = await response.json();\r\n  return json;\r\n}\r\n\r\n\r\n\r\n// CHUNK API REQUEST DATA \r\nconst chunking = (qty, arr_object) => {\r\n  let lastItem = '';\r\n  let newArr;\r\n  const lastItemIndex = arr_object.indexOf(lastItem);\r\n  if (lastItemIndex === arr_object.length - 1) return resolve('done');\r\n  if (!lastItem) {\r\n    newArr = [...arr_object].slice(0, qty);\r\n    lastItem = [...newArr].pop();\r\n  } else {\r\n    const newIndex = arr_object.indexOf(lastItem) + 1;\r\n    newArr = [...arr_object].slice(newIndex, qty + newIndex);\r\n    lastItem = [...newArr].pop();\r\n  }\r\n\r\n  // // DEBUG\r\n  // console.log(newArr)\r\n  return newArr\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport const fetch_rendered_data = async qty => {\r\n  const arr = fetch_stocks()\r\n    .then(promise_object => chunking(qty, promise_object))\r\n    .then(chunk => chunking(qty, promise_object))\r\n  \r\n  await arr;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}