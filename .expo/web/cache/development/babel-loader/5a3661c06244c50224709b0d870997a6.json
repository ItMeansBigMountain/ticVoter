{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar fetch_stocks = function fetch_stocks() {\n  var response, json;\n  return _regeneratorRuntime.async(function fetch_stocks$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://dumbstockapi.com/stock?exchanges=NYSE'));\n\n        case 2:\n          response = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 5:\n          json = _context.sent;\n          return _context.abrupt(\"return\", json);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar arr = fetch_stocks().then(function _callee(arr_object) {\n  return _regeneratorRuntime.async(function _callee$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          console.log(arr_object);\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n});\nvar lastItem = '';\nexport var fetch_rendered_data = function fetch_rendered_data(qty) {\n  var arr;\n  return _regeneratorRuntime.async(function fetch_rendered_data$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          arr = fetch_stocks().then(function _callee2(arr_object) {\n            return _regeneratorRuntime.async(function _callee2$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    console.log(arr_object);\n                    new Promise(function (resolve, reject) {\n                      var newArr;\n                      var lastItemIndex = arr.indexOf(lastItem);\n                      if (lastItemIndex === arr.length - 1) return resolve('done');\n\n                      if (!lastItem) {\n                        newArr = _toConsumableArray(arr).slice(0, qty);\n                        lastItem = _toConsumableArray(newArr).pop();\n                      } else {\n                        var newIndex = arr.indexOf(lastItem) + 1;\n                        newArr = _toConsumableArray(arr).slice(newIndex, qty + newIndex);\n                        lastItem = _toConsumableArray(newArr).pop();\n                      }\n\n                      setTimeout(function () {\n                        resolve(newArr);\n                      }, 1000);\n                    });\n\n                  case 2:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          });\n\n        case 1:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["C:/Users/affan/Desktop/JavaScript/REACT/projects/ticVoter/DataServer.js"],"names":["fetch_stocks","fetch","response","json","arr","then","arr_object","console","log","lastItem","fetch_rendered_data","qty","Promise","resolve","reject","newArr","lastItemIndex","indexOf","length","slice","pop","newIndex","setTimeout"],"mappings":";;;AAGA,IAAMA,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACEC,KAAK,CACxB,+CADwB,CADP;;AAAA;AACfC,UAAAA,QADe;AAAA;AAAA,2CAIFA,QAAQ,CAACC,IAAT,EAJE;;AAAA;AAIfA,UAAAA,IAJe;AAAA,2CAKZA,IALY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;AAaA,IAAMC,GAAG,GAAGJ,YAAY,GAAGK,IAAf,CACV,iBAAOC,UAAP;AAAA;AAAA;AAAA;AAAA;AACEC,UAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CADU,CAAZ;AAOA,IAAIG,QAAQ,GAAG,EAAf;AACA,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAMC,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BP,UAAAA,GAD2B,GACrBJ,YAAY,GAAGK,IAAf,CACV,kBAAOC,UAAP;AAAA;AAAA;AAAA;AAAA;AACEC,oBAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AAGA,wBAAIM,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B,0BAAIC,MAAJ;AACA,0BAAMC,aAAa,GAAGZ,GAAG,CAACa,OAAJ,CAAYR,QAAZ,CAAtB;AACA,0BAAIO,aAAa,KAAKZ,GAAG,CAACc,MAAJ,GAAa,CAAnC,EAAsC,OAAOL,OAAO,CAAC,MAAD,CAAd;;AAEtC,0BAAI,CAACJ,QAAL,EAAe;AACbM,wBAAAA,MAAM,GAAG,mBAAIX,GAAJ,EAASe,KAAT,CAAe,CAAf,EAAkBR,GAAlB,CAAT;AACAF,wBAAAA,QAAQ,GAAG,mBAAIM,MAAJ,EAAYK,GAAZ,EAAX;AACD,uBAHD,MAGO;AACL,4BAAMC,QAAQ,GAAGjB,GAAG,CAACa,OAAJ,CAAYR,QAAZ,IAAwB,CAAzC;AACAM,wBAAAA,MAAM,GAAG,mBAAIX,GAAJ,EAASe,KAAT,CAAeE,QAAf,EAAyBV,GAAG,GAAGU,QAA/B,CAAT;AACAZ,wBAAAA,QAAQ,GAAG,mBAAIM,MAAJ,EAAYK,GAAZ,EAAX;AACD;;AACDE,sBAAAA,UAAU,CAAC,YAAM;AACfT,wBAAAA,OAAO,CAACE,MAAD,CAAP;AACD,uBAFS,EAEP,IAFO,CAAV;AAGD,qBAhBD;;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADU,CADqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA5B","sourcesContent":["\r\n\r\n// HTTP REQUEST\r\nconst fetch_stocks = async () => {\r\n  let response = await fetch(\r\n    'https://dumbstockapi.com/stock?exchanges=NYSE'\r\n  );\r\n  let json = await response.json();\r\n  return json ;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// splits fetched json data array into chunks that are going to be requested whenever user scrolls\r\nconst arr = fetch_stocks().then(\r\n  async (arr_object) => {\r\n    console.log(arr_object)\r\n  }\r\n)\r\n\r\n\r\nlet lastItem = '';\r\nexport const fetch_rendered_data = async qty =>{\r\n  const arr = fetch_stocks().then(\r\n    async (arr_object) => {\r\n      console.log(arr_object)\r\n\r\n\r\n      new Promise((resolve, reject) => {\r\n        let newArr;\r\n        const lastItemIndex = arr.indexOf(lastItem);\r\n        if (lastItemIndex === arr.length - 1) return resolve('done');\r\n    \r\n        if (!lastItem) {\r\n          newArr = [...arr].slice(0, qty);\r\n          lastItem = [...newArr].pop();\r\n        } else {\r\n          const newIndex = arr.indexOf(lastItem) + 1;\r\n          newArr = [...arr].slice(newIndex, qty + newIndex);\r\n          lastItem = [...newArr].pop();\r\n        }\r\n        setTimeout(() => {\r\n          resolve(newArr);\r\n        }, 1000);\r\n      });\r\n      \r\n          }\r\n        )\r\n        \r\n    }\r\n  "]},"metadata":{},"sourceType":"module"}