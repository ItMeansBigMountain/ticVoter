{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar fetch_stocks = function fetch_stocks() {\n  var response, json;\n  return _regeneratorRuntime.async(function fetch_stocks$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('https://dumbstockapi.com/stock?exchanges=NYSE'));\n\n        case 2:\n          response = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 5:\n          json = _context.sent;\n          return _context.abrupt(\"return\", json);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar lastItem = '';\n\nvar chunking = function chunking(qty, arr_object, index) {\n  var newArr;\n  var lastItemIndex = arr_object.indexOf(lastItem);\n  console.log(lastItem, lastItemIndex);\n  if (lastItemIndex === arr_object.length - 1) return [\"done\"];\n\n  if (!lastItem) {\n    console.log('>>>>>> onEvent() rendered - initializing [all_stocks state] ');\n    newArr = _toConsumableArray(arr_object).slice(0, qty);\n    lastItem = _toConsumableArray(newArr).pop();\n  } else {\n    console.log('<<<<<< updating [all_stocks state]');\n    var newIndex = arr_object.indexOf(lastItem) + 1;\n    newArr = _toConsumableArray(arr_object).slice(newIndex, qty + newIndex);\n    lastItem = _toConsumableArray(arr_object).pop();\n  }\n\n  return newArr;\n};\n\nexport var fetch_rendered_data = function fetch_rendered_data(qty, index) {\n  var arr = fetch_stocks().then(function (promise_object) {\n    return chunking(qty, promise_object, index);\n  });\n  return arr;\n};","map":{"version":3,"sources":["C:/Users/affan/Desktop/JavaScript/REACT/projects/ticVoter/DataServer.js"],"names":["fetch_stocks","fetch","response","json","lastItem","chunking","qty","arr_object","index","newArr","lastItemIndex","indexOf","console","log","length","slice","pop","newIndex","fetch_rendered_data","arr","then","promise_object"],"mappings":";;;AAGA,IAAMA,YAAY,GAAG,SAAfA,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACEC,KAAK,CACxB,+CADwB,CADP;;AAAA;AACfC,UAAAA,QADe;AAAA;AAAA,2CAIFA,QAAQ,CAACC,IAAT,EAJE;;AAAA;AAIfA,UAAAA,IAJe;AAAA,2CAKZA,IALY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAArB;;AAYA,IAAIC,QAAQ,GAAG,EAAf;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAMC,UAAN,EAAmBC,KAAnB,EAA8B;AAC7C,MAAIC,MAAJ;AACA,MAAMC,aAAa,GAAGH,UAAU,CAACI,OAAX,CAAmBP,QAAnB,CAAtB;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ,EAAuBM,aAAvB;AAGA,MAAIA,aAAa,KAAKH,UAAU,CAACO,MAAX,GAAoB,CAA1C,EAA6C,OAAO,CAAC,MAAD,CAAP;;AAG7C,MAAI,CAACV,QAAL,EAAe;AACbQ,IAAAA,OAAO,CAACC,GAAR,CAAY,8DAAZ;AACAJ,IAAAA,MAAM,GAAG,mBAAIF,UAAJ,EAAgBQ,KAAhB,CAAsB,CAAtB,EAAyBT,GAAzB,CAAT;AACAF,IAAAA,QAAQ,GAAG,mBAAIK,MAAJ,EAAYO,GAAZ,EAAX;AACD,GAJD,MAOK;AACHJ,IAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACA,QAAMI,QAAQ,GAAGV,UAAU,CAACI,OAAX,CAAmBP,QAAnB,IAA+B,CAAhD;AACAK,IAAAA,MAAM,GAAG,mBAAIF,UAAJ,EAAgBQ,KAAhB,CAAsBE,QAAtB,EAAgCX,GAAG,GAAGW,QAAtC,CAAT;AACAb,IAAAA,QAAQ,GAAG,mBAAIG,UAAJ,EAAgBS,GAAhB,EAAX;AACD;;AAED,SAAOP,MAAP;AAED,CAzBD;;AA8BA,OAAO,IAAMS,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACZ,GAAD,EAAOE,KAAP,EAAiB;AAClD,MAAMW,GAAG,GAAGnB,YAAY,GACrBoB,IADS,CACJ,UAAAC,cAAc;AAAA,WAAIhB,QAAQ,CAACC,GAAD,EAAMe,cAAN,EAAuBb,KAAvB,CAAZ;AAAA,GADV,CAAZ;AAGA,SAAOW,GAAP;AACD,CALM","sourcesContent":["\r\n\r\n// HTTP REQUEST\r\nconst fetch_stocks = async () => {\r\n  let response = await fetch(\r\n    'https://dumbstockapi.com/stock?exchanges=NYSE'\r\n  );\r\n  let json = await response.json();\r\n  return json;\r\n}\r\n\r\n\r\n\r\n// CHUNK API REQUEST DATA \r\n\r\nvar lastItem = '';\r\nconst chunking = (qty, arr_object , index ) => {\r\n  let newArr;\r\n  const lastItemIndex = arr_object.indexOf(lastItem);\r\n  console.log(lastItem , lastItemIndex)\r\n\r\n  // check if list complete\r\n  if (lastItemIndex === arr_object.length - 1) return [\"done\"];\r\n\r\n  // INIT all_stocks state\r\n  if (!lastItem) {\r\n    console.log('>>>>>> onEvent() rendered - initializing [all_stocks state] ')\r\n    newArr = [...arr_object].slice(0, qty);\r\n    lastItem = [...newArr].pop();\r\n  }\r\n  \r\n  // UPDATE all_stocks state\r\n  else {\r\n    console.log('<<<<<< updating [all_stocks state]')\r\n    const newIndex = arr_object.indexOf(lastItem) + 1;\r\n    newArr = [...arr_object].slice(newIndex, qty + newIndex);\r\n    lastItem = [...arr_object].pop();\r\n  }\r\n\r\n  return newArr\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport const fetch_rendered_data = (qty , index) => {\r\n  const arr = fetch_stocks()\r\n    .then(promise_object => chunking(qty, promise_object , index))\r\n  // console.log(arr)\r\n  return arr;\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}