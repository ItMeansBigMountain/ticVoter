{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { fetch_rendered_data, fetch_stocks } from \"../DataServer\";\nimport { useNavigation } from '@react-navigation/core';\nimport SearchComponent from \"./SearchComponent\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar stopFetchMore = true;\n\nvar _ListFooterComponent = function ListFooterComponent() {\n  return _jsx(Text, {\n    style: {\n      fontSize: 16,\n      fontWeight: 'bold',\n      textAlign: 'center',\n      padding: 5\n    },\n    children: \"Loading...\"\n  });\n};\n\nvar ScrollLoad = function ScrollLoad() {\n  var navigation = useNavigation();\n  var quantity_rendered = 20;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      render_index = _useState4[0],\n      set_render_index = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loadingMore = _useState6[0],\n      setLoadingMore = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      search = _useState8[0],\n      setSearch = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      masterDataSource = _useState10[0],\n      setMasterDataSource = _useState10[1];\n\n  var renderItem = function renderItem(_ref) {\n    var item = _ref.item;\n    return _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        navigation.navigate(\"Vote\", {\n          data: item\n        });\n      },\n      style: styles.stock_button,\n      activeOpacity: 0.25,\n      children: _jsxs(Text, {\n        title: styles.stuck_button_text,\n        children: [item.ticker, \"  : \", item.name]\n      })\n    });\n  };\n\n  var updateData = function updateData() {\n    var response;\n    return _regeneratorRuntime.async(function updateData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            set_render_index(render_index + quantity_rendered);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch_rendered_data(quantity_rendered, render_index));\n\n          case 3:\n            response = _context.sent;\n            if (response) setData(_toConsumableArray(response));else setData([\"error\", \"DataServer.js\", \"didnt return the promise\"]);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    updateData();\n  }, []);\n\n  var handleOnEndReached = function handleOnEndReached() {\n    var response;\n    return _regeneratorRuntime.async(function handleOnEndReached$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setLoadingMore(true);\n\n            if (stopFetchMore) {\n              _context2.next = 10;\n              break;\n            }\n\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(fetch_rendered_data(quantity_rendered, render_index));\n\n          case 4:\n            response = _context2.sent;\n\n            if (!(response === 'done')) {\n              _context2.next = 7;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", setLoadingMore(false));\n\n          case 7:\n            stopFetchMore = true;\n            setData([].concat(_toConsumableArray(data), _toConsumableArray(response)));\n            set_render_index(render_index + quantity_rendered);\n\n          case 10:\n            setLoadingMore(false);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var ItemView = function ItemView(_ref2) {\n    var item = _ref2.item;\n    return _jsxs(Text, {\n      style: styles.itemStyle,\n      onPress: function onPress() {\n        return getItem(item);\n      },\n      children: [item.id, '.', item.title.toUpperCase()]\n    });\n  };\n\n  var ItemSeparatorView = function ItemSeparatorView() {\n    return _jsx(View, {\n      style: {\n        height: 0.5,\n        width: '100%',\n        backgroundColor: '#C8C8C8'\n      }\n    });\n  };\n\n  var getItem = function getItem(item) {\n    alert('Id : ' + item.id + ' Title : ' + item.title);\n  };\n\n  var searchFilterFunction = function searchFilterFunction(text) {\n    if (text) {\n      var newData = data.filter(function (item) {\n        var itemData = item.ticker ? item.ticker.toUpperCase() : ''.toUpperCase();\n        var textData = text.toUpperCase();\n        return itemData.indexOf(textData) > -1;\n      });\n      setData(newData);\n      setSearch(text);\n    } else {\n      setData(data);\n      setSearch(text);\n    }\n  };\n\n  return _jsxs(View, {\n    children: [_jsx(View, {\n      style: styles.container,\n      children: _jsx(TextInput, {\n        style: styles.textInputStyle,\n        onChangeText: function onChangeText(text) {\n          return searchFilterFunction(text);\n        },\n        value: search,\n        underlineColorAndroid: \"transparent\",\n        placeholder: \"Search Here\"\n      })\n    }), _jsx(FlatList, {\n      data: data,\n      keyExtractor: function keyExtractor(item) {\n        return data.indexOf(item);\n      },\n      renderItem: renderItem,\n      onEndReached: handleOnEndReached,\n      onEndReachedThreshold: 0.01,\n      onScrollBeginDrag: function onScrollBeginDrag() {\n        stopFetchMore = false;\n      },\n      ListFooterComponent: function ListFooterComponent() {\n        return loadingMore && _jsx(_ListFooterComponent, {});\n      }\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    margin: 50\n  },\n  stock_button: {\n    textAlign: 'center',\n    fontWeight: 'bold',\n    fontSize: 20,\n    padding: 15,\n    borderBottomColor: 'red',\n    borderBottomWidth: 2\n  },\n  stuck_button_text: {\n    textAlign: 'center',\n    fontWeight: 'bold',\n    fontSize: 20,\n    padding: 15,\n    borderBottomColor: 'red',\n    borderBottomWidth: 2\n  },\n  itemStyle: {\n    padding: 10\n  },\n  textInputStyle: {\n    height: 40,\n    borderWidth: 1,\n    paddingLeft: 20,\n    margin: 5,\n    borderColor: '#009688',\n    backgroundColor: '#FFFFFF'\n  }\n});\nexport default ScrollLoad;","map":{"version":3,"sources":["C:/Users/affan/Desktop/JavaScript/REACT/projects/ticVoter/components/ScrollLoad.js"],"names":["StatusBar","React","useEffect","useState","fetch_rendered_data","fetch_stocks","useNavigation","SearchComponent","stopFetchMore","ListFooterComponent","fontSize","fontWeight","textAlign","padding","ScrollLoad","navigation","quantity_rendered","data","setData","render_index","set_render_index","loadingMore","setLoadingMore","search","setSearch","masterDataSource","setMasterDataSource","renderItem","item","navigate","styles","stock_button","stuck_button_text","ticker","name","updateData","response","handleOnEndReached","ItemView","itemStyle","getItem","id","title","toUpperCase","ItemSeparatorView","height","width","backgroundColor","alert","searchFilterFunction","text","newData","filter","itemData","textData","indexOf","container","textInputStyle","StyleSheet","create","flex","alignItems","justifyContent","margin","borderBottomColor","borderBottomWidth","borderWidth","paddingLeft","borderColor"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { FlatList, StyleSheet, Text, View, TouchableOpacity , TextInput} from 'react-native';\r\nimport { fetch_rendered_data, fetch_stocks } from '../DataServer';\r\nimport { useNavigation } from '@react-navigation/core';\r\nimport SearchComponent from './SearchComponent';\r\n\r\n\r\n// check to halt load requests\r\nlet stopFetchMore = true;\r\n\r\n\r\n\r\n// LOADING VIEW\r\nconst ListFooterComponent = () => (\r\n    <Text\r\n        style={{\r\n            fontSize: 16,\r\n            fontWeight: 'bold',\r\n            textAlign: 'center',\r\n            padding: 5,\r\n        }}\r\n    >\r\n        Loading...\r\n    </Text>\r\n);\r\n\r\n\r\n\r\n\r\n// MAIN COMPONENT\r\nconst ScrollLoad = () => {\r\n\r\n    const navigation = useNavigation()\r\n\r\n    const quantity_rendered = 20;\r\n    const [data, setData] = useState([]);\r\n    const [render_index, set_render_index] = useState(0);\r\n    const [loadingMore, setLoadingMore] = useState(false);\r\n    const [search, setSearch] = useState('');\r\n    const [masterDataSource, setMasterDataSource] = useState([]);\r\n  \r\n\r\n\r\n\r\n\r\n    // DATA ARRAY ITEM VIEW\r\n    const renderItem = ({ item }) => {\r\n        return (\r\n            <TouchableOpacity\r\n                onPress={() => {\r\n                    navigation.navigate(\"Vote\", { data: item })\r\n                }}\r\n                style={styles.stock_button}\r\n                activeOpacity={0.25}\r\n            >\r\n                <Text title={styles.stuck_button_text} >\r\n                    {item.ticker}  : {item.name}\r\n                </Text>\r\n            </TouchableOpacity>\r\n        );\r\n    };\r\n\r\n\r\n    // UPDATE STATE OF DISPLAY DATA VIA SCROLL\r\n    const updateData = async () => {\r\n        set_render_index(render_index + quantity_rendered)\r\n        // gets data from server.js\r\n        const response = await fetch_rendered_data(quantity_rendered, render_index)\r\n        // check if we got data from DataServer.js\r\n        if (response) setData([...response]);\r\n        else setData([\"error\", \"DataServer.js\", \"didnt return the promise\"])\r\n    };\r\n\r\n    // on page render\r\n    useEffect(() => {\r\n        updateData()\r\n    }, []);\r\n\r\n\r\n\r\n    // load more unless server resolves done\r\n    const handleOnEndReached = async () => {\r\n        setLoadingMore(true);\r\n        if (!stopFetchMore) {\r\n            const response = await fetch_rendered_data(quantity_rendered, render_index); //fetch\r\n            if (response === 'done') return setLoadingMore(false);\r\n            stopFetchMore = true;\r\n            setData([...data, ...response]); // append to [state list]\r\n            set_render_index(render_index + quantity_rendered) // add 20 to last index\r\n        }\r\n        setLoadingMore(false);\r\n    };\r\n\r\n    const ItemView = ({ item }) => {\r\n        return (\r\n            // Flat List Item\r\n            <Text style={styles.itemStyle} onPress={() => getItem(item)}>\r\n                {item.id}\r\n                {'.'}\r\n                {item.title.toUpperCase()}\r\n            </Text>\r\n        );\r\n    };\r\n\r\n    const ItemSeparatorView = () => {\r\n        return (\r\n            // Flat List Item Separator\r\n            <View\r\n                style={{\r\n                    height: 0.5,\r\n                    width: '100%',\r\n                    backgroundColor: '#C8C8C8',\r\n                }}\r\n            />\r\n        );\r\n    };\r\n\r\n    const getItem = (item) => {\r\n        // Function for click on an item\r\n        alert('Id : ' + item.id + ' Title : ' + item.title);\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // SEARCH BAR\r\n\r\n    const searchFilterFunction = (text) => {\r\n        // Check if searched text is not blank\r\n        if (text) {\r\n            const newData = data.filter(function (item) {\r\n                // Applying filter for the inserted text in search bar\r\n                const itemData = item.ticker\r\n                    ? item.ticker.toUpperCase()\r\n                    : ''.toUpperCase();\r\n                const textData = text.toUpperCase();\r\n                return itemData.indexOf(textData) > -1;\r\n            });\r\n            setData(newData);\r\n            setSearch(text);\r\n        } else {\r\n            // Inserted text is blank\r\n            setData(data);\r\n            setSearch(text);\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <View>\r\n\r\n\r\n\r\n            {/* SEARCH */}\r\n            <View style={styles.container}>\r\n                <TextInput\r\n                    style={styles.textInputStyle}\r\n                    onChangeText={(text) => searchFilterFunction(text)}\r\n                    value={search}\r\n                    underlineColorAndroid=\"transparent\"\r\n                    placeholder=\"Search Here\"\r\n                />\r\n                {/* <FlatList\r\n          data={filteredDataSource}\r\n          keyExtractor={(item, index) => index.toString()}\r\n          ItemSeparatorComponent={ItemSeparatorView}\r\n          renderItem={ItemView}\r\n        /> */}\r\n            </View>\r\n\r\n\r\n\r\n\r\n\r\n\r\n            {/* DISPLAY */}\r\n            <FlatList\r\n                data={data}\r\n                keyExtractor={item => data.indexOf(item)}\r\n                renderItem={renderItem}\r\n                onEndReached={handleOnEndReached}\r\n                onEndReachedThreshold={0.01}\r\n                onScrollBeginDrag={() => {\r\n                    stopFetchMore = false;\r\n                }}\r\n                ListFooterComponent={() => loadingMore && <ListFooterComponent />}\r\n            // onScroll={(event) => console.log(event)}\r\n            />\r\n\r\n\r\n        </View>\r\n\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: '#fff',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        margin: 50\r\n    },\r\n    stock_button: {\r\n        textAlign: 'center',\r\n        fontWeight: 'bold',\r\n        fontSize: 20,\r\n        padding: 15,\r\n        borderBottomColor: 'red',\r\n        borderBottomWidth: 2,\r\n    },\r\n    stuck_button_text: {\r\n        textAlign: 'center',\r\n        fontWeight: 'bold',\r\n        fontSize: 20,\r\n        padding: 15,\r\n        borderBottomColor: 'red',\r\n        borderBottomWidth: 2,\r\n    },\r\n\r\n    itemStyle: {\r\n        padding: 10,\r\n    },\r\n    textInputStyle: {\r\n        height: 40,\r\n        borderWidth: 1,\r\n        paddingLeft: 20,\r\n        margin: 5,\r\n        borderColor: '#009688',\r\n        backgroundColor: '#FFFFFF',\r\n    },\r\n\r\n\r\n});\r\n\r\n\r\n\r\n\r\nexport default ScrollLoad"]},"metadata":{},"sourceType":"module"}